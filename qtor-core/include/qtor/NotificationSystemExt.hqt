#pragma once
#include <cstddef>
#include <memory> // for shared_ptr

#include <viewed/ptr_sequence_container.hpp>
#include <viewed/sfview_qtbase.hpp>

#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtCore/QString>
#include <QtCore/QDateTime>
#include <QtGui/QIcon>

#include <qtor/NotificationSystem.hqt>


namespace QtTools::NotificationSystem
{
	/// default simple notification implementation
	class SimpleNotification : public Notification
	{
	protected:
		QDateTime m_timestamp;
		QString   m_title;
		QString   m_text;		
		QIcon     m_icon;

		Qt::TextFormat m_textFmt = Qt::AutoText;

		unsigned m_priority        : sizeof(unsigned) * CHAR_BIT / 2 - 1; // = Normal
		unsigned m_level           : sizeof(unsigned) * CHAR_BIT / 2 - 1; // = Info
		unsigned m_priority_inited : 1;                                   // = 0
		unsigned m_level_inited    : 1;                                   // = 0

	public:
		virtual QString Title() const override        { return m_title;}
		virtual QString Title(QString title) override { return std::exchange(m_title, std::move(title)); }

		virtual QString Text() const override         { return m_text; }
		virtual QString Text(QString text) override   { return std::exchange(m_text, std::move(text)); }

		virtual Qt::TextFormat TextFmt() const override             { return m_textFmt; }
		virtual Qt::TextFormat TextFmt(Qt::TextFormat fmt) override { return std::exchange(m_textFmt, fmt); }

		virtual QString PlainText() const override;

		virtual QDateTime Timestamp() const override              { return m_timestamp; }
		virtual QDateTime Timestamp(QDateTime timestamp) override { return std::exchange(m_timestamp, std::move(timestamp)); }

		virtual QIcon Icon() const override      { return m_icon; }
		virtual QIcon Icon(QIcon icon) override  { return std::exchange(m_icon, std::move(icon)); }

		virtual NotificationPriority Priority() const override;
		virtual NotificationPriority Priority(NotificationPriority priority) override;

		virtual NotificationLevel Level() const override;
		virtual NotificationLevel Level(NotificationLevel level) override;

	public:
		SimpleNotification();
		SimpleNotification(QString title, QString text, Qt::TextFormat fmt, QDateTime timestamp);
		~SimpleNotification() = default;
	};


	class NotificationStore :
		public viewed::ptr_sequence_container<const Notification>
    {
		using self_type = NotificationStore;
		using base_type = viewed::ptr_sequence_container<const Notification>;

    private:
        QPointer<NotificationCenter> m_center;

    public:
        QPointer<NotificationCenter> GetNotificationCenter() const { return m_center; }

    public:
        NotificationStore(QPointer<NotificationCenter> center)
			: m_center(std::move(center)) {}
    };
}
