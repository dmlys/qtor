#pragma once
#include <variant>
#include <vector>

#include <qtor/types.hpp>
#include <qtor/torrent.hpp>
#include <QtCore/QString>
#include <QtCore/QAbstractItemModel>

#include <boost/multi_index_container.hpp>
#include <boost/multi_index/hashed_index.hpp>
#include <boost/multi_index/random_access_index.hpp>


namespace qtor
{
	class FileTreeModel : public QAbstractItemModel
	{
		using base_type = QAbstractItemModel;

	protected:
		struct page_type;
		struct node_type;
		union  value_ptr;

		using node_ptr     = node_type *;
		using page_ptr     = page_type *;
		using leaf_ptr     = const torrent_file *;
		using value_vector = std::vector<value_ptr>;

		static constexpr std::uintptr_t PAGE = 0;
		static constexpr std::uintptr_t LEAF = 1;

		// page_ptr or lead_ptr
		union value_ptr
		{
			struct
			{
				std::uintptr_t ptr  : sizeof(std::uintptr_t) * CHAR_BIT - 1;
				std::uintptr_t type : 1; // 1 - leaf_ptr, 0 - page_ptr
			};

			std::uintptr_t val;

		public:
			template <class visitor>
			auto visit(visitor && vis) const -> std::invoke_result_t<visitor, leaf_ptr>;

		public:
			value_ptr(leaf_ptr ptr);
			value_ptr(page_ptr ptr);

			value_ptr & operator =(leaf_ptr ptr);
			value_ptr & operator =(page_ptr ptr);

		public:
			value_ptr(value_ptr &&);
			value_ptr & operator =(value_ptr &&);

			value_ptr(const value_ptr &) = delete;
			value_ptr & operator =(const value_ptr &) = delete;

			value_ptr();
			~value_ptr();
		};

		struct node_type
		{
			QString name;
		};

		struct page_type
		{
			page_ptr *   parent;
			value_vector childs;
			node_type    node;
		};

		struct value_ptr_deleter
		{
			void operator()(leaf_ptr ptr) const {  }
			void operator()(page_ptr ptr) const { delete ptr; }
		};

		struct get_name_type
		{
			using result_type = filepath_type;
			filepath_type operator()(leaf_ptr lead) const;
			filepath_type operator()(page_ptr lead) const;
			filepath_type operator()(const value_ptr & val) const;
		};

		struct get_childr_type
		{
			using result_type = const value_vector &;
			result_type operator()(leaf_ptr leaf) const { return ms_empty; }
			result_type operator()(page_ptr page) const { return page->childs; }
			result_type operator()(const value_ptr & val) const { return val.visit(*this); }
		};


	public:
		using container = boost::multi_index_container<
			value_ptr, 
			boost::multi_index::indexed_by<
				boost::multi_index::hashed_unique<get_name_type>,
				boost::multi_index::random_access<>
			>
		>;

	protected:
		static constexpr value_ptr_deleter delete_value {};
		static constexpr get_name_type     get_name {};
		static constexpr get_childr_type   get_children {};

	protected:
		value_vector m_elements;
		static const value_vector ms_empty;
		static container ms_cont;	

	protected:
		auto parent_page(page_ptr * ptr) const -> page_ptr *;
		auto parent_row (page_ptr * ptr) const -> int;

	protected:
		page_ptr * get_ppage(const QModelIndex & index) const;
		const value_ptr & get_element_ptr(const QModelIndex & index) const;
		QModelIndex createIndex(int row, int column, page_ptr * pptr) const { return base_type::createIndex(row, column, pptr); }

	public:
		virtual int rowCount(const QModelIndex & parent = QModelIndex()) const override;
		virtual int columnCount(const QModelIndex & parent = QModelIndex()) const override;
		virtual QModelIndex parent(const QModelIndex & index) const override;
		virtual QModelIndex index(int row, int column, const QModelIndex & parent = QModelIndex()) const override;

		//virtual Qt::ItemFlags flags(const QModelIndex & index) const override;
		virtual QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;
		virtual QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;

	protected:
		void fill_page(value_vector & pages, QStringRef prefix,
			std::vector<torrent_file>::const_iterator first, 
			std::vector<torrent_file>::const_iterator last);

		void set_parent(page_ptr * parent, value_vector & pages);

	public:
		void Init(std::vector<torrent_file> & vals);

	public:
		using base_type::base_type;
	};

	template <class visitor>
	inline auto FileTreeModel::value_ptr::visit(visitor && vis) const
		-> std::invoke_result_t<visitor, leaf_ptr>
	{
		return this->type
			? std::forward<visitor>(vis)(reinterpret_cast<leaf_ptr>(ptr))
			: std::forward<visitor>(vis)(reinterpret_cast<page_ptr>(ptr));
	}

	template <class visitor>
	inline auto visit(const FileTreeModel::value_ptr & val, visitor && vis)
		-> std::invoke_result_t<visitor, FileTreeModel::leaf_ptr>
	{
		return val.visit(std::forward<visitor>(vis));
	}
}
