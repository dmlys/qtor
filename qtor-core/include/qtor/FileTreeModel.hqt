#pragma once
#include <qtor/torrent_file.hpp>
#include <qtor/torrent_file_store.hpp>
#include <qtor/AbstractItemModel.hqt>

#include <viewed/sftree_view_qtbase.hpp>
#include <viewed/sftree_model_qtbase.hpp>

namespace qtor
{
	struct torrent_file_tree_traits
	{
		using path_type = filepath_type;
		using pathview_type = filepath_type;

		using path_equal_to_type = std::equal_to<>;
		using path_less_type     = std::less<>;
		using path_hash_type     = std::hash<pathview_type>;

		using leaf_type = torrent_file;
		using node_type = torrent_dir;

		static void set_name(node_type & node, const pathview_type & path, const pathview_type & name) { node.filename = name; }
		static pathview_type get_name(const leaf_type & leaf) { return qtor::get_name(leaf.filename); }
		static pathview_type get_name(const node_type & node) { return qtor::get_name(node.filename); }
		static pathview_type get_path(const leaf_type & leaf) { return leaf.filename; }

		auto parse_path(const pathview_type & path, const pathview_type & context) const
		    -> std::tuple<std::uintptr_t, pathview_type, pathview_type>;
		bool is_child(const pathview_type & path, const pathview_type & context, const pathview_type & node_name) const;

		// fix for QString to QStringRef conversion
		//static auto analyze(const path_type & path, const pathview_type & context)
		//    -> std::tuple<std::uintptr_t, pathview_type, pathview_type>
		//{ return analyze(&path, context); }
		//static bool is_child(const path_type & path, const pathview_type & context, const pathview_type & node_name)
		//{ return is_child(&path, context, name_name); }

		class column_sorter
		{
			using leaf_compare_function = bool(*)(const leaf_type & l1, const leaf_type & l2) noexcept;
			using node_compare_function = bool(*)(const node_type & l1, const node_type & l2) noexcept;

			leaf_compare_function m_leaf_compare;
			node_compare_function m_node_compare;

			template <class Entity, class Type, Type Entity::*member, class Pred>
			static bool compare_entity(const Entity & e1, const Entity & e2) noexcept;

		public:
			void reset(unsigned type, Qt::SortOrder order);

		public:
			inline bool operator()(const node_type & p1, const node_type & p2) const noexcept { return m_node_compare(p1, p2); }
			inline bool operator()(const node_type & p1, const leaf_type & l2) const noexcept { return true; }
			inline bool operator()(const leaf_type & l1, const leaf_type & l2) const noexcept { return m_leaf_compare(l1, l2); }
			inline bool operator()(const leaf_type & l1, const node_type & p2) const noexcept { return false; }

		public:
			column_sorter() : column_sorter(torrent_file_meta::FileName, Qt::AscendingOrder) {}
			column_sorter(unsigned type, Qt::SortOrder order) { reset(type, order); }
		};

		class filepath_filter
		{
			path_type m_filterStr;

		public:
			viewed::refilter_type set_expr(QString expr);

			bool always_matches() const noexcept { return m_filterStr == ""; }
			bool matches(const pathview_type & name) const noexcept;

			inline bool operator()(const pathview_type & name) const noexcept { return matches(name); }
			inline bool operator()(const leaf_type & l) const noexcept { return matches(get_name(l)); }
			inline bool operator()(const node_type & p) const noexcept { return matches(get_name(p)); }
			inline explicit operator bool() const noexcept { return not always_matches(); }
		};

		using sort_pred_type = column_sorter;
		using filter_pred_type = filepath_filter;
	};

	class FileTreeModelBase : public viewed::sftree_facade_qtbase<torrent_file_tree_traits, AbstractItemModel>
	{
		using self_type = FileTreeModelBase;
		using base_type = viewed::sftree_facade_qtbase<torrent_file_tree_traits, AbstractItemModel>;
		using view_type = viewed::sftree_facade_qtbase<torrent_file_tree_traits, AbstractItemModel>;

	protected:
		struct get_total_size_type
		{
			template <class Type>
			auto operator()(const Type * item)       const { return item->total_size; }
			auto operator()(const ivalue_ptr & item) const { return viewed::visit(node_accessor(*this), item); }
		};

		struct get_have_size_type
		{
			template <class Type>
			auto operator()(const Type * item)       const { return item->have_size; }
			auto operator()(const ivalue_ptr & item) const { return viewed::visit(node_accessor(*this), item); }
		};

		struct get_wanted_type
		{
			Qt::CheckState operator()(const leaf_type * item)  const { return item->wanted ? Qt::Checked : Qt::Unchecked; }
			Qt::CheckState operator()(const page_type * item)  const { return item->node.wanted; }
			Qt::CheckState operator()(const ivalue_ptr & item) const { return viewed::visit(*this, item); }
		};

	protected:
		static constexpr get_total_size_type     get_total_size {};
		static constexpr get_have_size_type      get_have_size {};
		static constexpr get_wanted_type         get_wanted {};

	protected:
		virtual void recalculate_page(page_type & page) override;

	protected:
		virtual void SortBy(int column, Qt::SortOrder order) override;
		virtual void FilterBy(QString expr) override;

	public:
		//virtual Qt::ItemFlags flags(const QModelIndex & index) const override;
		virtual QVariant GetItem(const QModelIndex & index) const override;
		virtual QVariant GetEntity(const QModelIndex & idx) const override;
		virtual int FullRowCount(const QModelIndex & parent = QModelIndex()) const override;

	public:
		FileTreeModelBase(QObject * parent = nullptr);
	};


	using FileTreeModel     = viewed::sftree_model_qtbase<FileTreeModelBase>;
	using FileTreeViewModel = viewed::sftree_view_qtbase<torrent_file_store, FileTreeModelBase>;
}
