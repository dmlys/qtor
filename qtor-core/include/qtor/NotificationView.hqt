#pragma once
#include <QtWidgets/QFrame>
#include <QtWidgets/QMenu>
#include <QtWidgets/QVBoxLayout>
#include <QtWidgets/QLineEdit>
#include <QtWidgets/QListView>
#include <QtTools/HeaderControlModel.hqt>

#include <qtor/NotificationSystem.hqt>

namespace QtTools::NotificationSystem
{
	class NotificationView : public QFrame
	{
		Q_OBJECT;

	private:
		using base_type = QFrame;

	protected:
		/// display model
		std::shared_ptr<AbstractNotificationModel> m_model;

		/// child widgets/graphical objects
		QVBoxLayout * m_verticalLayout = nullptr;
		QLineEdit   * m_rowFilter = nullptr;
		QListView   * m_listView = nullptr;

		// By default - SimpleNotificationDelegate 
		QAbstractItemDelegate * m_listDelegate = nullptr;

		/// hints for initial widget size
		const QSize m_defMinSizeHint = QSize(640, 480);
		QSize m_sizeHint = m_defMinSizeHint;

		/// current filter string
		QString m_filterString;

	protected:
		void ModelChanged();
		void OnFilterChanged();

	protected:
		/// creates context menu for an item with idx,
		/// if idx is not valid, common menu was requested
		//virtual QMenu * CreateItemMenu(const QModelIndex & idx);
		/// basic menu handler
		//virtual void contextMenuEvent(QContextMenuEvent * ev) override;
		// to change ListView clipboard handling
		virtual bool eventFilter(QObject * watched, QEvent * event) override;

	protected:
		virtual void ConnectModel();
		virtual void DisconnectModel();

	public:
		/// main layout
		QVBoxLayout * GetLayout() const { return m_verticalLayout; }
		/// filter field
		QLineEdit * GetFilterWidget() const { return m_rowFilter; }
		/// list view
		QListView * GetTableView() const { return m_listView; }

	public:
		virtual void SetFilter(QString newFilter);
		virtual auto GetFilter() const -> QString { return m_filterString; }
		Q_SIGNAL void FilterChanged(QString newFilter);

		/// initializes widget
		/// @Param model specifies model, if null - deinitializes widget
		virtual void SetModel(std::shared_ptr<AbstractNotificationModel> model);
		virtual auto GetModel() const -> std::shared_ptr<AbstractNotificationModel> { return m_model; }

		/// desired size
		//QSize sizeHint() const override;
		
	Q_SIGNALS:
		void LinkActivated(QString href) const;
		void LinkHovered(QString href) const;

	public:
		NotificationView(QWidget * parent = nullptr);
		~NotificationView() = default;

	protected:
		virtual void setupUi();
		virtual void retranslateUi();
		virtual void connectSignals();
	};
}
