#pragma once
#include <memory>
#include <any>

#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtCore/QString>
#include <QtCore/QDateTime>
#include <QtCore/QAbstractItemModel>
#include <QtWidgets/QStyleOption>

namespace QtTools
{
	class NotificationPopupWidget;
}

namespace QtTools::NotificationSystem
{
	class Notification;
	class AbstractNotificationModel;

	class NotificationStore;
	class NotificationModel;
	class TimestampPred;
	class NotificationFilter;
	class SimpleNotification;

	class SimpleNotificationDelegate;
	class SimpleNotificationPopup;

	class NotificationCenter;
	class NotificationView;
	class NotificationLayout;
	

	enum NotificationPriority
	{
		Low    = -1,
		Normal =  0,
		High   =  1,
	};

	enum NotificationLevel
	{
		Info,    // implies Normal priority
		Warn,    // implies Normal priority
		Error,   // implies High   priority
	};



	/// Simple notification system. More or less.
	class NotificationCenter : public QObject
	{
		Q_OBJECT
	
	protected:
		std::shared_ptr<NotificationStore> m_store;

	public:
		virtual std::shared_ptr<AbstractNotificationModel> CreateModel();

		virtual std::shared_ptr<      NotificationStore> GetStore();
		virtual std::shared_ptr<const NotificationStore> GetStore() const;

	public:
		virtual void AddNotification(std::unique_ptr<const Notification> notification);
		virtual void AddNotification(QString title, QString text, QDateTime timestamp = QDateTime::currentDateTime());

	Q_SIGNALS:
		void LinkActivated(const Notification & notification, QString href);
		void LinkHovered(const Notification & notification, QString href);
		void LinkUnhovered(const Notification & notification, QString href);

	public:
		NotificationCenter(QObject * parent = nullptr);
		virtual ~NotificationCenter() = default;
	};



	class Notification : public QObject
	{
		Q_OBJECT

		Q_PROPERTY(QString title READ Title WRITE Title)
		Q_PROPERTY(QString text  READ Text  WRITE Text)
		Q_PROPERTY(QDateTime timestamp READ Timestamp WRITE Timestamp)
		Q_PROPERTY(QIcon logo READ Logo WRITE Logo)

		Q_PROPERTY(QString filterText    READ FilterText)
		Q_PROPERTY(QString clipboardText READ ClipboardText)

		Q_PROPERTY(NotificationPriority priority READ Priority WRITE Priority)
		Q_PROPERTY(NotificationLevel    level    READ Level    WRITE Level)

	public:
		virtual QString Title() const = 0;
		virtual QString Title(QString title) = 0;

		virtual QString Text() const = 0;
		virtual QString Text(QString text) = 0;
		
		virtual QDateTime Timestamp() const = 0;
		virtual QDateTime Timestamp(QDateTime timestamp) = 0;

		virtual QIcon Logo() const = 0;
		virtual QIcon Logo(QIcon logo) = 0;

		virtual NotificationPriority Priority() const = 0;
		virtual NotificationPriority Priority(NotificationPriority priority) = 0;

		virtual NotificationLevel Level() const = 0;
		virtual NotificationLevel Level(NotificationLevel level) = 0;

	public:
		virtual QString FilterText() const = 0;
		virtual QString ClipboardText() const = 0;

	public:
		virtual NotificationPopupWidget * CreatePopup() const = 0;

	public:
		// item delegate methods
		virtual void paint(QPainter * painter, const QStyleOptionViewItem & option, std::any & cookie) const = 0;
		virtual QSize sizeHint(const QStyleOptionViewItem & option, std::any & cookie) const = 0;
		virtual bool editorEvent(QEvent * event, const QStyleOptionViewItem & option, std::any & cookie) const = 0;

	public:
		virtual ~Notification() = default;
	};



	class AbstractNotificationModel : public QAbstractListModel
	{
		Q_OBJECT;

	private:
		using base_type = QAbstractListModel;
		using self_type = AbstractNotificationModel;

	protected:
		QString m_filterStr;

	protected:
		virtual void FilterBy(QString expr) = 0;

	public:
		virtual QPointer<NotificationCenter> GetNotificationCenter() const = 0;
		virtual const Notification * GetItem(int row) const = 0;		
		
		virtual int FullRowCount() const = 0;

	public:
		void SetFilter(QString expr);
		auto GetFilter() const noexcept { return m_filterStr; }
		Q_SIGNAL void FilterChanged(QString expr);

	public:
		int rowCount(const QModelIndex & parent = QModelIndex()) const override = 0;
		QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;

	public:
		using QAbstractListModel::QAbstractListModel;
	};
}
