#pragma once
#include <memory>
#include <any>

#include <viewed/sfview_qtbase.hpp>
#include <viewed/ptr_sequence_container.hpp>

#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtCore/QString>
#include <QtCore/QDateTime>
#include <QtCore/QAbstractItemModel>

#include <QtWidgets/QFrame>
#include <QtWidgets/QMenu>
#include <QtWidgets/QVBoxLayout>
#include <QtWidgets/QLineEdit>
#include <QtWidgets/QListView>

#include <QtTools/HeaderControlModel.hqt>
#include <QtWidgets/QAbstractItemDelegate>

#include <qtor/NotificationPopupWidget.hqt>


namespace QtTools::NotificationSystem
{
	class Notification;
	class AbstractNotificationModel;

	class NotificationStore;
	class NotificationModel;
	class TimestampPred;
	class NotificationFilter;
	class SimpleNotification;

	class SimpleNotificationDelegate;
	class SimpleNotificationPopup;

	class NotificationCenter;
	class NotificationView;

	enum NotificationPriority
	{
		Low = -1,
		Normal = 0,
		High = 1,
	};

	//enum NotificationType
	//{
	//	Normal,  // implies Normal priority
	//	Warn,    // implies Normal priority
	//	Error,   // implies High   priority
	//};



	/// Simple notification system. More or less.
	class NotificationCenter : public QObject
	{
		Q_OBJECT
	
	protected:
		std::shared_ptr<NotificationStore> m_store;

	public:
		virtual std::shared_ptr<AbstractNotificationModel> CreateModel();

		virtual std::shared_ptr<      NotificationStore> GetStore();
		virtual std::shared_ptr<const NotificationStore> GetStore() const;

	public:
		virtual void AddNotification(std::unique_ptr<const Notification> notification);
		virtual void AddNotification(QString title, QString text, QDateTime timestamp = QDateTime::currentDateTime());

	public:
		void setParent(QWidget * parent) { QObject::setParent(parent); }
		auto parent() const -> QWidget * { return static_cast<QWidget *>(QObject::parent()); }

	Q_SIGNALS:
		void LinkActivated(const Notification & notification, QString href);
		void LinkHovered(const Notification & notification, QString href);
		void LinkUnhovered(const Notification & notification, QString href);

	public:
		NotificationCenter(QWidget * parent = nullptr);
		virtual ~NotificationCenter() = default;
	};

	class Notification : public QObject
	{
		Q_OBJECT

		Q_PROPERTY(QString title READ Title WRITE Title)
		Q_PROPERTY(QString text  READ Text  WRITE Text)
		Q_PROPERTY(QDateTime timestamp READ Timestamp WRITE Timestamp)
		Q_PROPERTY(QIcon logo READ Logo WRITE Logo)

		Q_PROPERTY(QString filterText    READ FilterText)
		Q_PROPERTY(QString clipboardText READ ClipboardText)

	public:
		virtual QString Title() const = 0;
		virtual QString Title(QString title) = 0;

		virtual QString Text() const = 0;
		virtual QString Text(QString text) = 0;
		
		virtual QDateTime Timestamp() const = 0;
		virtual QDateTime Timestamp(QDateTime timestamp) = 0;

		virtual QIcon Logo() const = 0;
		virtual QIcon Logo(QIcon logo) = 0;

	public:
		virtual QString FilterText() const = 0;
		virtual QString ClipboardText() const = 0;

	public:
		virtual NotificationPopupWidget * CreatePopup() const = 0;

	public:
		// item delegate methods
		virtual void paint(QPainter * painter, const QStyleOptionViewItem & option, std::any & cookie) const = 0;
		virtual QSize sizeHint(const QStyleOptionViewItem & option, std::any & cookie) const = 0;
		virtual bool editorEvent(QEvent * event, const QStyleOptionViewItem & option, std::any & cookie) const = 0;

	public:
		virtual ~Notification() = default;
	};



	class AbstractNotificationModel : public QAbstractListModel
	{
		Q_OBJECT;

	private:
		using base_type = QAbstractListModel;
		using self_type = AbstractNotificationModel;

	protected:
		QString m_filterStr;

	protected:
		virtual void FilterBy(QString expr) = 0;

	public:
		virtual QPointer<NotificationCenter> GetNotificationCenter() const = 0;
		virtual const Notification * GetItem(int row) const = 0;		
		
		virtual int FullRowCount() const = 0;

	public:
		void SetFilter(QString expr);
		auto GetFilter() const noexcept { return m_filterStr; }
		Q_SIGNAL void FilterChanged(QString expr);

	public:
		int rowCount(const QModelIndex & parent = QModelIndex()) const override = 0;
		QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;

	public:
		using QAbstractListModel::QAbstractListModel;
	};



	
	class NotificationView : public QFrame
	{
		Q_OBJECT;

	private:
		using base_type = QFrame;

	protected:
		/// display model
		std::shared_ptr<AbstractNotificationModel> m_model;

		/// child widgets/graphical objects
		QVBoxLayout * m_verticalLayout = nullptr;
		QLineEdit   * m_rowFilter = nullptr;
		QListView   * m_listView = nullptr;

		// By default - SimpleNotificationDelegate 
		QAbstractItemDelegate * m_listDelegate = nullptr;

		/// hints for initial widget size
		const QSize m_defMinSizeHint = QSize(640, 480);
		QSize m_sizeHint = m_defMinSizeHint;

		/// current filter string
		QString m_filterString;

	protected:
		void ModelChanged();
		void OnFilterChanged();

	protected:
		/// creates context menu for an item with idx,
		/// if idx is not valid, common menu was requested
		//virtual QMenu * CreateItemMenu(const QModelIndex & idx);
		/// basic menu handler
		//virtual void contextMenuEvent(QContextMenuEvent * ev) override;
		// to change ListView clipboard handling
		virtual bool eventFilter(QObject * watched, QEvent * event) override;

	protected:
		virtual void ConnectModel();
		virtual void DisconnectModel();

	public:
		/// main layout
		QVBoxLayout * GetLayout() const { return m_verticalLayout; }
		/// filter field
		QLineEdit * GetFilterWidget() const { return m_rowFilter; }
		/// list view
		QListView * GetTableView() const { return m_listView; }

	public:
		virtual void SetFilter(QString newFilter);
		virtual auto GetFilter() const -> QString { return m_filterString; }
		Q_SIGNAL void FilterChanged(QString newFilter);

		/// initializes widget
		/// @Param model specifies model, if null - deinitializes widget
		virtual void SetModel(std::shared_ptr<AbstractNotificationModel> model);
		virtual auto GetModel() const -> std::shared_ptr<AbstractNotificationModel> { return m_model; }

		/// desired size
		//QSize sizeHint() const override;

	public:
		NotificationView(QWidget * parent = nullptr);
		~NotificationView() = default;

	protected:
		virtual void setupUi();
		virtual void retranslateUi();
		virtual void connectSignals();
	};
}
