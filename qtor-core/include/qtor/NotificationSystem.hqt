#pragma once
#include <memory>
#include <vector>
#include <any>

#include <viewed/sfview_qtbase.hpp>
#include <viewed/ptr_sequence_container.hpp>

#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtCore/QString>
#include <QtCore/QDateTime>
#include <QtCore/QAbstractItemModel>
#include <QtWidgets/QAbstractItemDelegate>

#include <qtor/NotificationPopupWidget.hqt>


namespace QtTools::NotificationSystem
{
	class Notification;
	class AbstractNotificationModel;

	class NotificationStore;
	class NotificationModel;
	class TimestampPred;
	class NotificationFilter;
	class SimpleNotification;

	class SimpleNotificationDelegate;
	class SimpleNotificationPopup;

	/// Simple notification system. More or less.
	class NotificationCenter : public QObject
	{
		Q_OBJECT
	
	protected:
		std::shared_ptr<NotificationStore> m_store;

	public:
		virtual std::unique_ptr<AbstractNotificationModel> CreateModel();

		virtual std::shared_ptr<      NotificationStore> GetStore();
		virtual std::shared_ptr<const NotificationStore> GetStore() const;

	public:
		virtual void AddNotification(std::unique_ptr<const Notification> notification);
		virtual void AddNotification(QString title, QString text, QDateTime timestamp = QDateTime::currentDateTime());

	public:
		void setParent(QWidget * parent) { QObject::setParent(parent); }
		auto parent() const -> QWidget * { return static_cast<QWidget *>(QObject::parent()); }

	Q_SIGNALS:
		void LinkActivated(const Notification & notification, QString href);
		void LinkHovered(const Notification & notification, QString href);
		void LinkUnhovered(const Notification & notification, QString href);

	public:
		NotificationCenter(QWidget * parent = nullptr);
		virtual ~NotificationCenter() = default;
	};

	class Notification : public QObject
	{
		Q_OBJECT

	public:
		virtual QDateTime Timestamp() const = 0;
		virtual QString Text() const = 0;
		virtual NotificationPopupWidget * CreatePopup() const = 0;

	public:
		// item delegate methods
		virtual void paint(QPainter * painter, const QStyleOptionViewItem & option, std::any & cookie) const = 0;
		virtual QSize sizeHint(const QStyleOptionViewItem & option, std::any & cookie) const = 0;
		virtual bool editorEvent(QEvent * event, const QStyleOptionViewItem & option, std::any & cookie) const = 0;

	public:
		virtual ~Notification() = default;
	};

	class AbstractNotificationModel : public QAbstractListModel
	{
	public:
		virtual QPointer<NotificationCenter> GetNotificationCenter() const = 0;
		virtual const Notification * GetItem(int row) const = 0;
		virtual void FilterBy(QString expr) = 0;
		
		virtual int FullRowCount() const = 0;
		virtual int rowCount(const QModelIndex & parent = QModelIndex()) const = 0;

		QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;

	public:
		using QAbstractListModel::QAbstractListModel;
	};
}
