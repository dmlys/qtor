#pragma once
#include <QtCore/QAbstractTableModel>
#include <qtor/sparse_container.hpp>

namespace qtor
{
	class sparse_container_model_meta : public virtual sparse_container_meta
	{
	public:
		virtual QString item_name(index_type key) const = 0;
		virtual QString format_item(const sparse_container & cont, index_type key) const = 0;
		virtual QString format_item_short(const sparse_container & cont, index_type key) const = 0;

	public:
		~sparse_container_model_meta() = default;
	};



	class AbstractSparseContainerModel : public QAbstractTableModel
	{
		Q_OBJECT;

	private:
		using base_type = QAbstractTableModel;
		using self_type = AbstractSparseContainerModel;

	protected:
		std::vector<unsigned> m_columns;
		const sparse_container_model_meta * m_meta = nullptr;

	protected:
		void SetColumns(std::vector<unsigned> columns);

	public:
		auto GetTableMeta() { return m_meta; }

		virtual int FindColumn(unsigned name) const;
		virtual QString FieldName(int section) const;
		virtual QString GetValue(int row, int column) const;
		virtual QString GetValueShort(int row, int column) const;

		virtual const sparse_container           & GetItem(int row) const = 0;
		virtual const sparse_container::any_type & GetItem(int row, int column) const;

		virtual void FilterBy(QString expr) = 0;
		virtual int FullRowCount() const = 0;

	public:
		int rowCount(const QModelIndex & parent = QModelIndex()) const override = 0;
		int columnCount(const QModelIndex & parent = QModelIndex()) const override;

		void sort(int column, Qt::SortOrder order = Qt::AscendingOrder) override = 0;

		// some default implementations with help of GetValueShort / GetFieldName / others
		QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;
		QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;

	public:
		auto GetItem(const QModelIndex & idx) const -> const sparse_container::any_type &
		{ return idx.isValid() ? GetItem(idx.row(), idx.column()) : sparse_container::ms_empty; }

		QString FieldName(const QModelIndex & idx) const { return idx.isValid() ? FieldName(idx.row()) : QString::null; }
		QString GetValue(const QModelIndex & idx) const { return idx.isValid() ? GetValue(idx.row(), idx.column()) : QString::null; }
		QString GetValueShort(const QModelIndex & idx) const { return idx.isValid() ? GetValueShort(idx.row(), idx.column()) : QString::null; }

	public:
		using base_type::base_type;
	};
}
