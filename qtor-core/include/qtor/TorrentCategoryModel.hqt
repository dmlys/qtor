#pragma once
#include <qtor/types.hpp>
#include <qtor/torrent.hpp>
#include <qtor/torrent_store.hpp>
#include <qtor/AbstractItemModel.hqt>
#include <ext/enum_bitset.hpp>

#include <QtGui/QIcon>

namespace qtor
{
	class TorrentCategoryModel : public QAbstractListModel
	{
		Q_OBJECT;

	private:
		using self_type = TorrentCategoryModel;
		using base_type = QAbstractListModel;

	public:
		enum category_type
		{
			all,
			downloading,
			downloaded,
			active,
			nonactive,
			stopped,
			error,

			count
		};

		using category_set = ext::enum_bitset<category_type, category_type::count>;

		struct category_item
		{
			category_type category;
			std::size_t count;
			QString name;
			QIcon icon;
		};

	private:
		std::vector<category_item> m_categories;
		qtor::view_manager_ref<torrent_store> m_torrent_store;

		boost::signals2::scoped_connection m_on_update_conn;
		boost::signals2::scoped_connection m_on_erase_conn;
		boost::signals2::scoped_connection m_on_clear_conn;

	private:		
		virtual QIcon IconForCategory(category_type cat) const;
		virtual QString NameForCategory(category_type cat) const;
		virtual void InitCategoryItems();
		virtual void RecalculateData();

	public:
		static category_set Category(const torrent & torr) noexcept;
		virtual category_item GetItem(int row) const;
		virtual void Reinit();

	public:
		virtual int rowCount(const QModelIndex & parent = {}) const override;
		QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;

	public:
		void SetTorrentStore(std::shared_ptr<torrent_store> store);

	public:
		TorrentCategoryModel(QObject * parent = nullptr);
	};
}
