#pragma once
#include <QtGui/QPen>
#include <QtGui/QBrush>

#include <QtWidgets/QWidget>
#include <QtWidgets/QLayout>
#include <QtWidgets/QLabel>
#include <QtWidgets/QGraphicsDropShadowEffect>

namespace QtTools
{
	class NotificationPopupWidget : public QWidget
	{
		Q_OBJECT;
	
		// shadow properties
		Q_PROPERTY(QPointF shadowOffset     READ ShadowOffset     WRITE SetShadowOffset     RESET ResetShadowOffset     NOTIFY ShadowOffsetChanged)
		Q_PROPERTY(qreal   shadowBlurRadius READ ShadowBlurRadius WRITE SetShadowBlurRadius RESET ResetShadowBlurRadius NOTIFY ShadowBlurRadiusChanged)
		Q_PROPERTY(QColor  shadowColor      READ ShadowColor      WRITE SetShadowColor      RESET ResetShadowColor      NOTIFY ShadowColorChanged)

		// notification background properties
		Q_PROPERTY(QBrush backgroundBrush   READ BackgroundBrush  WRITE SetBackgroundBrush  RESET ResetBackgroundBrush  NOTIFY BackgroundBrushChanged)
		Q_PROPERTY(QPen   framePen          READ FramePen         WRITE SetFramePen         RESET ResetFramePen         NOTIFY FramePenChanged)

	protected:
		class DropShadowEffect;

	protected:
		QPen m_framePen;
		QBrush m_backgroundBrush;

		DropShadowEffect * m_effect = nullptr;

	protected:
		QMarginsF ShadowMargins() const noexcept;
		QMargins  FrameMargins() const noexcept;

	protected:
		QSize sizeHint() const override;
		void paintEvent(QPaintEvent * ev) override;

	public:
		QPointF ShadowOffset() const noexcept;
		void SetShadowOffset(QPointF offset);
		void ResetShadowOffset();

		qreal ShadowBlurRadius() const noexcept;
		void SetShadowBlurRadius(qreal radius);
		void ResetShadowBlurRadius();

		QColor ShadowColor() const noexcept;
		void SetShadowColor(QColor color);
		void ResetShadowColor();

		QPen FramePen() const noexcept;
		void SetFramePen(QPen pen);
		void ResetFramePen();

		QBrush BackgroundBrush() const noexcept;
		void SetBackgroundBrush(QBrush brush);
		void ResetBackgroundBrush();

	Q_SIGNALS:
		void ShadowOffsetChanged();
		void ShadowBlurRadiusChanged();
		void ShadowColorChanged();

		void BackgroundBrushChanged();
		void FramePenChanged();

	public:
		NotificationPopupWidget(QWidget * parent = nullptr, Qt::WindowFlags flags = {});
	};


	class NotificationPopupWidget::DropShadowEffect : public QGraphicsDropShadowEffect
	{
		using base_type = QGraphicsDropShadowEffect;

	protected:
		auto owner() { return static_cast<NotificationPopupWidget * >(parent()); }
		void draw(QPainter * painter) override;

	public:
		QRectF boundingRectFor(const QRectF & rect) const override;

	public:
		DropShadowEffect(NotificationPopupWidget * owner) 
			: base_type(owner) {};
	};


	class NotificationPopupLabel : public NotificationPopupWidget
	{
		Q_OBJECT

		Q_PROPERTY(QString text READ text WRITE setText)

	protected:
		QLayout * m_layout = nullptr;
		QLabel * m_label = nullptr;

	public:
		QString text() const noexcept { return m_label->text(); }
		void setText(QString text) { m_label->setText(text); }

	public:
		NotificationPopupLabel(QWidget * parent = nullptr);
	};


	inline QPointF NotificationPopupWidget::ShadowOffset() const noexcept
	{
		return m_effect->offset();
	}

	inline void NotificationPopupWidget::SetShadowOffset(QPointF offset)
	{
		m_effect->setOffset(offset);
		setContentsMargins((ShadowMargins() + FrameMargins()).toMargins());
		Q_EMIT ShadowOffsetChanged();
		update();
	}

	inline void NotificationPopupWidget::ResetShadowOffset()
	{
		SetShadowOffset({4.0, 4.0});
	}

	inline qreal NotificationPopupWidget::ShadowBlurRadius() const noexcept
	{
		return m_effect->blurRadius();
	}

	inline void NotificationPopupWidget::SetShadowBlurRadius(qreal radius)
	{
		m_effect->setBlurRadius(radius);
		setContentsMargins((ShadowMargins() + FrameMargins()).toMargins());
		Q_EMIT ShadowBlurRadiusChanged();
	}

	inline void NotificationPopupWidget::ResetShadowBlurRadius()
	{
		SetShadowBlurRadius(4.0);
	}

	inline QColor NotificationPopupWidget::ShadowColor() const noexcept
	{
		return m_effect->color();
	}

	inline void NotificationPopupWidget::SetShadowColor(QColor radius)
	{
		m_effect->setColor(radius);
		Q_EMIT ShadowColorChanged();
	}

	inline void NotificationPopupWidget::ResetShadowColor()
	{
		SetShadowColor(palette().color(QPalette::Shadow));
	}

	inline QPen NotificationPopupWidget::FramePen() const noexcept
	{
		return m_framePen;
	}

	inline void NotificationPopupWidget::SetFramePen(QPen pen)
	{
		m_framePen = pen;
		setContentsMargins((ShadowMargins() + FrameMargins()).toMargins());
		Q_EMIT FramePenChanged();
		update();
	}

	inline void NotificationPopupWidget::ResetFramePen()
	{
		SetFramePen(palette().color(QPalette::Shadow));
	}

	inline QBrush NotificationPopupWidget::BackgroundBrush() const noexcept
	{
		return m_backgroundBrush;
	}

	inline void NotificationPopupWidget::SetBackgroundBrush(QBrush brush)
	{
		m_backgroundBrush = brush;
		Q_EMIT BackgroundBrushChanged();
		update();
	}

	inline void NotificationPopupWidget::ResetBackgroundBrush()
	{
		SetBackgroundBrush(QBrush());
	}
}

