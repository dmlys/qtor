#pragma once
#include <QtGui/QPen>
#include <QtGui/QBrush>
#include <QtCore/QAbstractAnimation>

#include <QtWidgets/QWidget>
#include <QtWidgets/QGraphicsDropShadowEffect>

namespace QtTools
{
	/// NotificationPopupWidget is used to display notifications to user.
	/// It's a frameless(Qt::FramelessWindowHint)
	/// floating translucent separate(but can be a child too) widget with shadow effect.
	/// 
	/// This class is more of a base, it provides only background, frame and a shadow effect.
	/// You a expected to add content, overriding paintEvent, sizeHint,
	/// or simpler adding child widget(s) and setting layout of NotificationPopupWidget.
	/// 
	/// Also on RMB click widget starts move out animation 
	/// to nearest left or right parent window edge and then auto closes.
	/// 
	/// NOTE:
	///  This widget set Qt::WA_DeleteOnClose attribute in constructor
	/// 
	/// TECHNICAL ASPECTS:
	///  This widget can be both Qt::Widget and Qt::Window(use contructor and setWindowFlag method).
	///  If it is a Qt::Window it will automatically have Qt::WA_TranslucentBackground.
	///  Due how Qt works widget cannot draw shadow effect outside it's own widget area on non qt-windows.
	///  Instead this widget draws shadow always inside it's area, setting margins to add needed shadow+frame space.
	///  
	///  |--------------------------------------------------------------
	///  |++++++++++++++++++++++++++++++++                            |
	///  |+                              +                            |
	///  |+    contentRect()             +                            |
	///  |+    visible part              +                            |
	///  |++++++++++++++++++++++++++++++++  - frame                   |
	///  |                                                            |
	///  |   background inherited from parent                         |
	///  |   with frame and shadow effect                             |
	///  |                                                            |
	///  |   rect = contentsRect() + contentsMargins()                |
	///  |   contentsMargins() = FrameMargins() + ShadowMargins()     |
	///  --------------------------------------------------------------
	///  
	///  Frame margins is a QMargin {framePen.width(), ..., framePen.width()}
	///  Shadow margins calculated as follows:
	///      
	///      return {
	///          std::max(shadowBlurRadius - shadowBlurOffset.x(), 0.0),
	///          std::max(shadowBlurRadius - shadowBlurOffset.y(), 0.0),
	///          shadowBlurRadius + shadowBlurOffset.x(),
	///          shadowBlurRadius + shadowBlurOffset.y(),
	///      };
	///  
	///  Default ShadowOffset = {4.0, 4.0}
	///  Default ShadowBlurRadius = 4.0
	///  Default ShadowColor = palette().color(QPalette::Shadow)
	///  
	///  Default BackgroundBrush = QBrush()
	///  Default FramePen = palette().color(QPalette::Shadow)
	///
	class NotificationPopupWidget : public QWidget
	{
		Q_OBJECT;
	
		// shadow properties
		Q_PROPERTY(QPointF shadowOffset     READ ShadowOffset     WRITE SetShadowOffset     RESET ResetShadowOffset     NOTIFY ShadowOffsetChanged)
		Q_PROPERTY(qreal   shadowBlurRadius READ ShadowBlurRadius WRITE SetShadowBlurRadius RESET ResetShadowBlurRadius NOTIFY ShadowBlurRadiusChanged)
		Q_PROPERTY(QColor  shadowColor      READ ShadowColor      WRITE SetShadowColor      RESET ResetShadowColor      NOTIFY ShadowColorChanged)

		// notification background properties
		Q_PROPERTY(QBrush backgroundBrush   READ BackgroundBrush  WRITE SetBackgroundBrush  RESET ResetBackgroundBrush  NOTIFY BackgroundBrushChanged)
		Q_PROPERTY(QPen   framePen          READ FramePen         WRITE SetFramePen         RESET ResetFramePen         NOTIFY FramePenChanged)

	private:
		using base_type = QWidget;

	protected:
		class DropShadowEffect;

	protected:
		QPen m_framePen;
		QBrush m_backgroundBrush;

		DropShadowEffect * m_effect = nullptr;

	protected:
		virtual QMarginsF ShadowMargins() const noexcept;
		virtual QMargins  FrameMargins() const noexcept;

	protected:
		virtual QSize sizeHint() const override;
		virtual void paintEvent(QPaintEvent * ev) override;
		virtual void mousePressEvent(QMouseEvent * ev) override;

	protected:
		virtual QAbstractAnimation * CreateMoveOutAnimation();

	public Q_SLOTS:
		// returns moved out animation created
		virtual QAbstractAnimation * MoveOutAndClose();

	public:
		QPointF ShadowOffset() const noexcept;
		void SetShadowOffset(QPointF offset);
		void ResetShadowOffset();

		qreal ShadowBlurRadius() const noexcept;
		void SetShadowBlurRadius(qreal radius);
		void ResetShadowBlurRadius();

		QColor ShadowColor() const noexcept;
		void SetShadowColor(QColor color);
		void ResetShadowColor();

		QPen FramePen() const noexcept;
		void SetFramePen(QPen pen);
		void ResetFramePen();

		QBrush BackgroundBrush() const noexcept;
		void SetBackgroundBrush(QBrush brush);
		void ResetBackgroundBrush();

	Q_SIGNALS:
		void ShadowOffsetChanged(QPointF offset);
		void ShadowBlurRadiusChanged(qreal radius);
		void ShadowColorChanged(QColor color);

		void BackgroundBrushChanged(QBrush brush);
		void FramePenChanged(QPen pen);

		// fires when move out animation finishes
		void MovedOut();

	public:
		NotificationPopupWidget(QWidget * parent = nullptr, Qt::WindowFlags flags = {});
	};

	/// This is mostly same as QGraphicsDropShadowEffect, but it calculates rect slightly differently:
	/// boundingRectFor always returns passed rectangle as is, but shadow instead drawn in parent widget margins
	/// (see NotificationPopupWidget description).
	/// 
	/// Also shadow only drawn in non contentsRect area. 
	/// Widget content itself is not affected by it(think of translucency).
	class NotificationPopupWidget::DropShadowEffect : public QGraphicsDropShadowEffect
	{
		using base_type = QGraphicsDropShadowEffect;

	protected:
		auto owner() { return static_cast<NotificationPopupWidget * >(parent()); }
		void draw(QPainter * painter) override;

	public:
		QRectF boundingRectFor(const QRectF & rect) const override;

	public:
		DropShadowEffect(NotificationPopupWidget * owner) 
			: base_type(owner) {};
	};
}
