#pragma once
#include <QtCore/QObject>
#include <QtCore/QSharedPointer>
#include <QtTools/gui_executor.hqt>
#include <QtTools/ToolsBase.hpp>
#include <QtTools/NotificationSystem.hpp>

#include <qtor/abstract_data_source.hpp>
#include <qtor/torrent_store.hpp>
#include <qtor/AbstractItemModel.hqt>


namespace qtor
{
	class Application : public QObject
	{
		Q_OBJECT;

	public:
		typedef std::shared_ptr<torrent_store>           torrent_store_ptr;
		typedef std::shared_ptr<abstract_data_source>    abstract_data_source_ptr;
		typedef std::shared_ptr<AbstractTableItemModel>  abstract_torrent_model_ptr;

	protected:
		std::shared_ptr<ext::library_logger::logger> m_logger = nullptr;

		abstract_data_source_ptr m_source;
		torrent_store_ptr        m_torrent_store;

		QtTools::NotificationSystem::NotificationCenter * m_notificationCenter = new QtTools::NotificationSystem::NotificationCenter(this);
		QtTools::gui_executor * m_executor = new QtTools::gui_executor(this);

	protected:
		virtual auto CreateSource() -> abstract_data_source_ptr = 0;
		virtual void OnSourceEvent(abstract_data_source::event_type ev);
		virtual void OnConnectionError();

	protected:
		template <class Type>
		Type OnExecutionResult(ext::future<Type> & result, const torrent_id_list & ids, QString errTitle, QString errMessageTemplate);

	protected:
		virtual void OnTorrentsRefreshed(ext::future<torrent_list> result, torrent_id_list ids);

		virtual void OnTorrentsStarted(ext::future<void> result, torrent_id_list ids);
		virtual void OnTorrentsStopped(ext::future<void> result, torrent_id_list ids);
		virtual void OnTorrentsRemoved(ext::future<void> result, torrent_id_list ids);
		virtual void OnTorrentsAnnounced(ext::future<void> result, torrent_id_list ids);

	protected:
		// initializes this object, probably should be called in constructor
		virtual void Init();
		virtual auto GetStore() -> torrent_store_ptr;

	public:
		virtual auto AccquireTorrentModel() -> abstract_torrent_model_ptr;
		virtual auto GetSource() -> abstract_data_source_ptr;

		auto * GuiExecutor() const noexcept { return m_executor; }
		auto * NotificationCenter() const noexcept { return m_notificationCenter; }

	public Q_SLOTS:
		virtual void Connect();
		virtual void Disconnect();

	public Q_SLOTS:
		virtual void RefreshTorrents(torrent_id_list ids);

		virtual void StartTorrents(torrent_id_list ids);
		virtual void StartNowTorrents(torrent_id_list ids);
		virtual void StopTorrents(torrent_id_list ids);
		virtual void AnnounceTorrents(torrent_id_list ids);
		virtual void RemoveTorrents(torrent_id_list ids);
		virtual void PurgeTorrents(torrent_id_list ids);
		
	Q_SIGNALS:
		void Connected();
		void Disconnected();
		void ConnectionError();
		void ConnectionLost();
	};



	template <class Type>
	Type Application::OnExecutionResult(ext::future<Type> & result, const torrent_id_list & ids, QString errTitle, QString errMessageTemplate)
	{
		assert(result.is_ready());
		if (not result.has_exception())
			return result.get();

		QString errText;

		try
		{
			result.get();
		}
		catch (std::runtime_error & ex)
		{
			errText += QtTools::ToQString(ex.what());
		}
		catch (...)
		{
			errText = tr("Unknown error");
		}

		m_notificationCenter->AddError(errTitle, errMessageTemplate.arg(errText));
	}
}
