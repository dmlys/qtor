#pragma once
#include <QtCore/QObject>
#include <QtCore/QSharedPointer>
#include <QtTools/ToolsBase.hpp>
#include <QtTools/GuiQueue.hqt>

#include <qtor/abstract_data_source.hpp>
#include <qtor/torrent_store.hpp>
#include <qtor/AbstractItemModel.hqt>


namespace qtor
{
	class Application : public QObject
	{
		Q_OBJECT;

	public:
		typedef std::shared_ptr<torrent_store>           torrent_store_ptr;
		typedef std::shared_ptr<abstract_data_source>    abstract_data_source_ptr;
		typedef std::shared_ptr<AbstractTableItemModel>  abstract_torrent_model_ptr;

	protected:
		abstract_data_source_ptr m_source;
		torrent_store_ptr        m_torrent_store;

		QtTools::GuiQueue * m_queue = new QtTools::GuiQueue(this);

	protected:
		virtual auto CreateSource() -> abstract_data_source_ptr = 0;
		virtual void OnEventSource(abstract_data_source::event_type ev);

	protected:
		// initializes this object, probably should be called in constructor
		virtual void Init();
		virtual auto GetStore() -> torrent_store_ptr;

	public:
		virtual auto AccquireTorrentModel() -> abstract_torrent_model_ptr;
		virtual auto GetSource() -> abstract_data_source_ptr;

	public Q_SLOTS:
		virtual void Connect();
		virtual void Disconnect();
		
	Q_SIGNALS:
		void Connected();
		void Disconnected();
		void ConnectionError();
		void ConnectionLost();
	};
}
