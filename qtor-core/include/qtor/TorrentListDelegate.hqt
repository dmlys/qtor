#pragma once
#include <QtGui/QTextFormat>
#include <QtWidgets/QAbstractItemDelegate>

#include <qtor/torrent.hpp>
#include <qtor/formatter.hqt>


namespace qtor
{
	/// Torrent delegate for list model. It's modeled after Qt-transmission GUI client.
	/// Consists of: 
	/// * Title text - holds torrent name
	/// * Progress text - progress string, current size, requested size, percentage, ratio, ...
	/// * Progress bar  - downloading/verification/seeding limit progress bar
	/// * Status text   - torrent status, download/upload speeds
	/// 
	/// Also supports text searching, matching text is highlighted
	class TorrentListDelegate : public QAbstractItemDelegate
	{
	protected:
		/// cached calculated various parts of drawn torrent.
		struct LaidoutItem
		{
			// First time delegate is called with sizeHint, 
			// option->rect contains basic rectangle where item can placed, 
			// it can be whole listView viewport area.
			// Second time delegate is called with paint,
			// and option->rect holds proper region calculated based on previous sizeHint calculation.
			// 
			// hintTopLeft holds option->rect topLeft point
			// so on second call we can just adjust calculated previously part rectangles

			QModelIndex index;  // index for which this item was computed
			QPoint hintTopLeft; // see above description

			const torrent   * tor = nullptr; // tor from model by index
			const formatter * fmt = nullptr; // fmt from model

			// option from sizeHint/paint call(update on each call), 
			// lifetime the same, this is just for a convenience.
			const QStyleOptionViewItem * option = nullptr;
						
			QFont baseFont;     // basic font, baseFont = option->font;
			QFont titleFont;    // title text font, 1.1 * baseFont, bold.
			QFont progressFont; // progress text font, 0.9 * baseFont
			QFont statusFont;   // status text font, 0.9 * baseFont;

			QString title;      // acquired by TitleText(tor, fmt)
			QString progress;	// acquired by ProgressText(tor, fmt)
			QString status;		// acquired by StatusText(tor, fmt)
			
			QRect titleRect;    // rectangle occupied by title text, without all margins
			QRect progressRect;	// rectangle occupied by progress text, without all margins
			QRect statusRect;	// rectangle occupied by status text, without all margins
			QRect barRect;		// rectangle occupied by progress bar, without all margins
			QRect totalRect;	// rectangle occupied by union of all rectangles, including all margins
		};

		mutable LaidoutItem m_cachedItem;

		// search text parameters
		QTextCharFormat m_searchFormat;
		QString m_searchText;

		static const QMargins ms_OutterMargins;
		static const QMargins ms_InnerMargins;

	protected:
		virtual QString TittleText(const torrent & tor, const formatter * fmt) const;
		virtual QString ProgressText(const torrent & tor, const formatter * fmt) const;
		virtual QString StatusText(const torrent & tor, const formatter * fmt) const;

	protected:
		virtual QPalette ProgressBarPalete(const LaidoutItem & item) const;
		virtual void LayoutItem(const QStyleOptionViewItem & option, const QModelIndex & index, LaidoutItem & cache) const;

		virtual void Draw(QPainter * painter, const LaidoutItem & item) const;
		virtual void DrawBackground(QPainter * painter, const LaidoutItem & item) const;
		virtual void DrawText(QPainter * painter, const LaidoutItem & item) const;
		virtual void DrawProgressBar(QPainter * painter, const LaidoutItem & item) const;

	public:
		QSize sizeHint(const QStyleOptionViewItem & option, const QModelIndex & index) const override;
		void paint(QPainter * painter, const QStyleOptionViewItem & option, const QModelIndex & index) const override;

	public:
		QString GetFilterText() const             { return m_searchText; }
		void    SetFilterText(const QString text) { m_searchText = text; }

		decltype(auto) GetFormat() const                         { return m_searchFormat; }
		void           SetFormat(const QTextCharFormat & format) { m_searchFormat = format; }

		virtual QString GetText(const QModelIndex & index) const;

	public:
		Q_DISABLE_COPY(TorrentListDelegate);

		TorrentListDelegate(QObject * parent = nullptr) : QAbstractItemDelegate(parent)
		{
			m_searchFormat.setForeground(Qt::GlobalColor::red);
			m_searchFormat.setBackground(Qt::GlobalColor::green);
		}
	};
}
