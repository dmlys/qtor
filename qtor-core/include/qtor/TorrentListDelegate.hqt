#pragma once
#include <qtor/torrent.hpp>
#include <qtor/formatter.hqt>

#include <QtGui/QTextFormat>
#include <QtWidgets/QAbstractItemDelegate>

namespace qtor
{
	class TorrentListDelegate : public QAbstractItemDelegate
	{
	protected:
		struct LaidoutItem
		{
			QModelIndex index;
			QPoint hintTopLeft;
			const torrent * tor = nullptr;
			const QStyleOptionViewItem * option = nullptr;
			const formatter * fmt = nullptr;
			
			QFont baseFont;
			QFont nameFont;
			QFont progressFont;
			QFont statusFont;

			QString name;
			QString progress;
			QString status;
			
			QRect nameRect;
			QRect statusRect;
			QRect barRect;
			QRect progressRect;
			QRect totalRect;
		};

		mutable LaidoutItem m_cachedItem;		

		QTextCharFormat m_searchFormat;
		QString m_searchText;

		static const QMargins ms_OutterMargins;
		static const QMargins ms_InnerMargins;

	protected:
		virtual QString TittleText(const torrent & tor, const formatter * fmt) const;
		virtual QString StatusText(const torrent & tor, const formatter * fmt) const;
		virtual QString ProgressText(const torrent & tor, const formatter * fmt) const;

	protected:
		virtual QPalette ProgressBarPalete(const LaidoutItem & item) const;
		virtual void LayoutItem(const QStyleOptionViewItem & option, const QModelIndex & index, LaidoutItem & cache) const;

		virtual void Draw(QPainter * painter, const LaidoutItem & item) const;
		virtual void DrawBackground(QPainter * painter, const LaidoutItem & item) const;
		virtual void DrawText(QPainter * painter, const LaidoutItem & item) const;
		virtual void DrawProgressBar(QPainter * painter, const LaidoutItem & item) const;

	public:
		QSize sizeHint(const QStyleOptionViewItem & option, const QModelIndex & index) const override;
		void paint(QPainter * painter, const QStyleOptionViewItem & option, const QModelIndex & index) const override;

	public:
		QString GetFilterText() const             { return m_searchText; }
		void    SetFilterText(const QString text) { m_searchText = text; }

		decltype(auto) GetFormat() const                         { return m_searchFormat; }
		void           SetFormat(const QTextCharFormat & format) { m_searchFormat = format; }

		virtual QString GetText(const QModelIndex & index) const;

	public:
		Q_DISABLE_COPY(TorrentListDelegate);

		TorrentListDelegate(QObject * parent = nullptr) : QAbstractItemDelegate(parent)
		{
			m_searchFormat.setForeground(Qt::GlobalColor::red);
			m_searchFormat.setBackground(Qt::GlobalColor::green);
		}
	};
}
