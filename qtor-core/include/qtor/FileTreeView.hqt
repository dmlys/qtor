#pragma once
#include <QtWidgets/QFrame>
#include <QtWidgets/QMenu>
#include <QtWidgets/QVBoxLayout>
#include <QtWidgets/QLineEdit>
#include <QtWidgets/QTreeView>

#include <QtTools/HeaderControlModel.hqt>
#include <QtTools/Delegates/SearchDelegate.hpp>

#include <qtor/FileTreeModel.hqt>

namespace qtor
{
	class MainWindow;

	/// File Tree Item view widget. Consists of QAbstractItemView + QLineEdit filter.
	/// Provides methods for behavior customization.
	class FileTreeView : public QFrame
	{
		Q_OBJECT

	private:
		using base_type = QFrame;

	private:
		std::shared_ptr<FileTreeModel> m_model;
		/// parent window
		MainWindow * m_parent = nullptr;

		/// table headers customization/tracking
		QtTools::HeaderControlModel * m_headerModel = nullptr;
		QtTools::HeaderSectionInfoList * m_headerConfig = nullptr;
		QtTools::Delegates::SearchDelegate * m_nameDelegate = nullptr;
		
		/// child widgets/graphical objects
		QVBoxLayout * m_verticalLayout = nullptr;
		QLineEdit   * m_rowFilter = nullptr;
		QTreeView   * m_treeView = nullptr;

		/// hints for initial widget size
		const QSize m_defMinSizeHint = QSize(640, 480);
		QSize m_sizeHint = m_defMinSizeHint;

		/// current filter string
		QString m_filterString;
		/// current sorting settings
		int m_sortColumn = -1;
		Qt::SortOrder m_sortOrder = Qt::AscendingOrder;

	protected:
		void ModelChanged();
		void OnFilterChanged();

	protected:
		///// Joins clipboard text from items and sets it into clipboard
		//virtual void CopySelectedIntoClipboard();
		///// creates context menu for an item with idx,
		///// if idx is not valid, common menu was requested
		//virtual QMenu * CreateItemMenu(const QModelIndex & idx);
		///// basic menu handler
		//virtual void contextMenuEvent(QContextMenuEvent * ev) override;
		///// to change ListView clipboard handling
		//virtual bool eventFilter(QObject * watched, QEvent * event) override;

	protected:
		virtual void ConnectModel();
		virtual void DisconnectModel();

	public:
		/// returns model, serving horizontal QHeaderView.
		/// Model created in Init call, this widget widget is a parent
		QtTools::HeaderControlModel * GetHeaderModel() const { return m_headerModel; }

		/// main layout
		QVBoxLayout * GetLayout() const { return m_verticalLayout; }
		/// filter field
		QLineEdit * GetFilterWidget() const { return m_rowFilter; }
		/// tree view
		QTreeView * GetTreeView() const { return m_treeView; }

	public:
		/// opens table headers configuration widget,
		virtual void OpenHeaderConfigurationWidget();
		/// opens table settings widget, for now it's OpenHeaderConfigurationWidget
		virtual void ViewSettings();
		/// adjusts resizes table columns by content
		virtual void ResizeColumnsToContents();

	public:
		virtual void SetFilter(QString newFilter);
		virtual auto GetFilter() const -> QString { return m_filterString; }
		Q_SIGNAL void FilterChanged(QString newFilter);

		virtual void Sort(int column, Qt::SortOrder order);
		virtual auto GetSorting() -> std::pair<int, Qt::SortOrder> const { return {m_sortColumn, m_sortOrder}; }
		Q_SIGNAL void SortingChanged(int column, Qt::SortOrder order);

		/// initializes widget
		/// @Param model specifies model, if null - deinitializes widget
		virtual void SetModel(std::shared_ptr<FileTreeModel> model);
		virtual auto GetModel() const -> const std::shared_ptr<FileTreeModel> & { return m_model; }

		/// initializes headers tracking, additionally sets headerConf configuration, see also QtTools::HeaderControlModel.
		/// TorrentsView must be initialized before calling this method.
		virtual void InitHeaderTracking(QtTools::HeaderSectionInfoList * headerConf = nullptr);

		/// desired size
		QSize sizeHint() const override;

	public:
		FileTreeView(QWidget * parent = nullptr);
		~FileTreeView();

	protected:
		void setupUi();
		void retranslateUi();
		void connectSignals();
	};
}
