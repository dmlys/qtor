#pragma once
#include <QtCore/QTimer>
#include <QtCore/QHash>
#include <QtCore/QPointer>
#include <QtWidgets/QAction>
#include <QtWidgets/QLabel>
#include <QtWidgets/QComboBox>
#include <QtWidgets/QMainWindow>
#include <QtWidgets/QTreeView>

#include <QtWidgets/QApplication>
#include <QtWidgets/QHBoxLayout>
#include <QtWidgets/QVBoxLayout>
#include <QtWidgets/QSplitter>

#include <QtWidgets/QToolBar>
#include <QtWidgets/QMenuBar>
#include <QtWidgets/QStatusBar>

#include <qtor/Application.hqt>
#include <qtor/abstract_data_source.hpp>
#include <qtor/TorrentsView.hqt>

namespace qtor
{
	class MainWindow : public QMainWindow
	{
		Q_OBJECT;

	protected:
		Application * m_app = nullptr;
		TorrentsView * m_torrentWidget = nullptr;

		// toolbar
		QToolBar * m_toolBar = nullptr;
		QAction * m_actionOpen = nullptr;
		QAction * m_actionStartAll = nullptr;
		QAction * m_actionStopAll = nullptr;
		QAction * m_actionDelete = nullptr;
		QAction * m_actionPreferences = nullptr;

	protected:
		// statusBar
		QStatusBar * m_statusbar = nullptr;
		QLabel * m_statusBarLabel = nullptr;
		QPixmap m_connectedPixmap;
		QPixmap m_disconnectedPixmap;
	
	protected Q_SLOTS:
		virtual void OnDisconnected();
		virtual void OnConnected();
		virtual void OnConnectionError();

	public Q_SLOTS:
		virtual void Connect();
		virtual void Disconnect();

	public: // torrent actions
		void StartTorrent(const QModelIndex & idx);
		void StartTorrentNow(const QModelIndex & idx);
		void StopTorrent(const QModelIndex & idx);

		void DeleteTorrent(const QModelIndex & idx);
		void PurgeTorrent(const QModelIndex & idx);

		void AnnounceTorrent(const QModelIndex & idx);
		void VerifyTorrentLocalData(const QModelIndex & idx);
		void SetTorrentLocation(const QModelIndex & idx, QString location);

		void saveToSvg();

	public: // torrent dialogs
		QWidget * OpenTorrentSettings(const QModelIndex & idx);
		QWidget * OpenTorrentLocationSettings(const QModelIndex & idx);
		QWidget * OpenTorrentFolder(const QModelIndex & idx);

	public:
		virtual void Init(Application & app);

		MainWindow(QWidget * wgt = nullptr);
		~MainWindow();

	protected:
		virtual void setupToolBars();
		virtual void setupStatusBar();
		virtual void setupMenu();
		virtual void setupUi();

		virtual void retranslateToolBars();
		virtual void retranslateStatusBar();
		virtual void retranslateUi();

		virtual void connectSignals();

	protected:
		/// statusbar methods
		/// масштабирует pixmap под statusbar
		QPixmap ScalePixmap(const QPixmap & pcx);
		void SetConnectedStatus();
		void SetDisconnectedStatus();
	};
}
