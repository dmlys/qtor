#pragma once
#include <QtWidgets/QFrame>
#include <QtWidgets/QMenu>
#include <QtWidgets/QVBoxLayout>
#include <QtWidgets/QLineEdit>
#include <QtWidgets/QTableView>
#include <QtWidgets/QListView>

#include <QtTools/HeaderControlModel.hqt>
#include <QtTools/DelayedExecutionTimer.hqt>
#include <QtTools/Delegates/SearchDelegate.hpp>

#include <qtor/TorrentsModel.hpp>
#include <qtor/TorrentListDelegate.hqt>


namespace qtor
{
	/// Torrent Item View Widget. Consists of QAbstractItemView + QLineEdit filter.
	/// QAbstractItemView can be table view or list view.
	/// Provides methods for behavior customization
	class TorrentsView : public QFrame
	{
		Q_OBJECT;
		
	private:
		using base_type = QFrame;

	public:
		enum : unsigned
		{
			ListMode,
			TableMode,
		};

	protected:
		/// display model
		std::shared_ptr<AbstractSparseContainerModel> m_model;

		/// table headers customization/tracking
		QtTools::HeaderControlModel * m_headerModel = nullptr;
		QtTools::HeaderSectionInfoList * m_headerConfig = nullptr;

		QtTools::Delegates::SearchDelegate * m_nameDelegate = nullptr;
		TorrentListDelegate * m_listDelegate = nullptr;

		unsigned m_viewMode = TableMode;
		QAbstractItemView * m_itemView = nullptr;

		/// child widgets/graphical objects
		QVBoxLayout * m_verticalLayout = nullptr;
		QLineEdit   * m_rowFilter = nullptr;
		QTableView  * m_tableView = nullptr;
		QListView   * m_listView = nullptr;

		/// hints for initial widget size
		const QSize m_defMinSizeHint = QSize(640, 480);
		QSize m_sizeHint = m_defMinSizeHint;

		/// current filter string
		QString m_filterString;

	protected:
		void ModelChanged();
		void OnFilterChanged();

		virtual void ConnectModel();
		virtual void DisconnectModel();

		/// basic menu handler
		virtual void contextMenuEvent(QContextMenuEvent * ev) override;

	public:
		/// returns model, serving horizontal QHeaderView.
		/// Model created in Init call, this widget widget is a parent
		QtTools::HeaderControlModel * GetHeaderModel() const { return m_headerModel; }

		/// main layout
		QVBoxLayout * GetLayout() const { return m_verticalLayout; }
		/// filter field
		QLineEdit * GetFilterWidget() const { return m_rowFilter; }
		/// table view
		QTableView * GetTableView() const { return m_tableView; }

	public:
		/// opens table headers configuration widget,
		virtual void OpenHeaderConfigurationWidget();
		/// opens table settings widget, for now it's OpenHeaderConfigurationWidget
		virtual void TableSettings();
		/// adjusts resizes table columns by content
		virtual void ResizeColumnsToContents();
		/// creates context menu for an item with idx,
		/// if idx is not valid, common menu was requested
		virtual QMenu * CreateItemMenu(const QModelIndex & idx);

	public:
		void    SetFilter(QString newFilter);
		QString GetFilter() const { return m_filterString; }

		/// desired size
		QSize sizeHint() const override;

	public:
		virtual void SetViewMode(unsigned mode);
		unsigned GetViewMode() const noexcept { return m_viewMode; }

	public:
		/// Returns the model that this widget displays. This model is set by calling Init
		const std::shared_ptr<AbstractSparseContainerModel> & GetModel() const { return m_model; }

		/// initializes widget
		/// @Param model specifies model, if null - deinitializes widget
		virtual void Init(std::shared_ptr<AbstractSparseContainerModel> model);

		/// initializes headers tracking, additionally sets headerConf configuration, see also QtTools::HeaderControlModel.
		/// TorrentsView must be initialized before calling this method.
		virtual void InitHeaderTracking(QtTools::HeaderSectionInfoList * headerConf = nullptr);

	public:
		TorrentsView(QWidget * parent = nullptr);
		~TorrentsView();

	protected:
		virtual void setupUi();
		virtual void retranslateUi();
		virtual void connectSignals();
	};
}
