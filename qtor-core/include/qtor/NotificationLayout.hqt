#pragma once
#include <vector>
#include <functional>

#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtCore/QAbstractAnimation>
#include <QtCore/QPropertyAnimation>
#include <QtWidgets/QWidget>

#include <qtor/NotificationSystem.hqt>


namespace QtTools::NotificationSystem
{
	// forward declarations
	class AbstractNotificationPopupWidget;


	class NotificationLayout : public QObject
	{
		Q_OBJECT

	protected:
		using GetPointPtr = QPoint(QRect::*)() const;
		using MovePointPtr = void (QRect::*)(const QPoint &);

		/// represents notification controlled by layout, holds some additional data
		struct Item
		{
			QPointer<const Notification> notification;
			QPointer<AbstractNotificationPopupWidget> widget;
			QPointer<QAbstractAnimation> moveOutAnimation;
			QPointer<QPropertyAnimation> slideAnimation;

		public:
			Item() = default;
			~Item();

			Item(Item &&) = default;
			Item & operator =(Item &&) = default;
		};

	public:
		using CreatePopupFunction = std::function<AbstractNotificationPopupWidget *(const Notification &)>;

	protected:
		static constexpr unsigned ms_spacing = 2;
		static const CreatePopupFunction ms_defaultCreatePopup;

	protected:		
		CreatePopupFunction m_createPopup = ms_defaultCreatePopup;
		std::vector<Item> m_items;
		NotificationCenter * m_ncenter = nullptr;
		QPointer<QWidget> m_parent;

		QRect m_geometry;
		Qt::Corner m_corner = Qt::BottomRightCorner;
		unsigned m_widgetsLimit = 5;

		bool m_relayoutScheduled = false;
		bool m_relocation = false;

	protected:
		static auto  DescribeCorner(Qt::Corner corner) -> std::tuple<GetPointPtr, MovePointPtr, int>;
		static QRect AlignRect(QRect rect, const QRect & parent, Qt::Corner corner);
		static QRect DefaultLayoutRect(const QRect & parent, Qt::Corner corner);

	protected:
		virtual QRect ParentGeometry() const;
		virtual QRect CalculateLayoutRect() const;
		virtual auto CreatePopup(const Notification * notification) const -> AbstractNotificationPopupWidget *;
		virtual void SlideWidget(Item & item, const QRect & hgeom, const QRect & lgeom) const;

	protected:
		virtual bool eventFilter(QObject * watched, QEvent * event) override;

	protected:
		Q_INVOKABLE void ScheduleUpdate();
		Q_INVOKABLE void DoScheduledUpdate();

		virtual void Update();
		virtual void Relayout();
		virtual void NotificationClosed();
		virtual void ClearAnimatedWidgets();

	public:
		virtual void AddNotification(QPointer<const Notification> notification);
		virtual auto NotificationsCount() const -> unsigned;
		virtual auto NotificationAt(unsigned index) -> QPointer<const Notification>;
		virtual auto TakeNotification(unsigned index) -> QPointer<const Notification>;

		void SetParent(QWidget * widget);
		QWidget * GetParent() const;

		 void SetGeometry(const QRect & geom);
		QRect GetGeometry() const;

		      void SetCorner(Qt::Corner corner);
		Qt::Corner GetCorner() const;

		void SetNotificationCenter(NotificationCenter * center);
		auto GetNotificationCenter() const { return m_ncenter; }

		/// you can override popup creation, 
		/// returning different AbstractNotificationPopupWidget implementation
		void SetCreatePopupFunction(CreatePopupFunction func);
		auto GetCreatePopupFunction() const { return m_createPopup; }

		virtual void Init(NotificationCenter & center);

	Q_SIGNALS:
		void LinkActivated(QString href) const;
		void LinkHovered(QString href) const;

	public:
		NotificationLayout(QObject * parent = nullptr) : QObject(parent) {}
		NotificationLayout(NotificationCenter & center, QObject * parent = nullptr);
		virtual ~NotificationLayout();
	};
}
