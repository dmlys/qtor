#pragma once
#include <tuple>
#include <vector>
#include <chrono>     // for std::chrono::duration
#include <functional> // for std::function

#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtCore/QAbstractAnimation>
#include <QtCore/QPropertyAnimation>
#include <QtWidgets/QWidget>

#include <qtor/NotificationSystem.hqt>


namespace QtTools::NotificationSystem
{
	// forward declarations
	class AbstractNotificationPopupWidget;


	class NotificationLayout : public QObject
	{
		Q_OBJECT

	protected:
		using GetPointPtr = QPoint(QRect::*)() const;
		using MovePointPtr = void (QRect::*)(const QPoint &);

		/// represents notification controlled by layout, holds some additional data
		struct Item
		{
			QPointer<const Notification> notification;
			QPointer<AbstractNotificationPopupWidget> widget;
			QPointer<QAbstractAnimation> moveOutAnimation;
			QPointer<QPropertyAnimation> slideAnimation;

		public:
			Item() = default;
			~Item();

			Item(Item &&) = default;
			Item & operator =(Item &&) = default;
		};

	public:
		using CreatePopupFunction = std::function<AbstractNotificationPopupWidget *(const Notification & n, const NotificationLayout & that)>;

	protected:
		static constexpr unsigned ms_spacing = 2;
		static const CreatePopupFunction ms_defaultCreatePopup;

	protected:		
		CreatePopupFunction m_createPopup = ms_defaultCreatePopup;

		NotificationCenter * m_ncenter = nullptr;
		QPointer<QWidget> m_parent;
		QRect m_geometry;
		Qt::Corner m_corner = Qt::BottomRightCorner;
		unsigned m_widgetsLimit = 5;

		// some format parameters
		
		QColor m_errorColor; // red, with 200 alpha
		QColor m_warnColor;  // yellow with 200 alpha
		QColor m_infoColor;  // grey with 200 alpha

		std::chrono::milliseconds m_errorTimeout = {}; // no timeout
		std::chrono::milliseconds m_warnTimeout = std::chrono::seconds(10);
		std::chrono::milliseconds m_infoTimeout = std::chrono::seconds(5);

		std::vector<Item> m_items;
		
		bool m_relayoutScheduled = false;
		bool m_relocation = false;

	protected:
		void InitColors();

	protected:
		static auto  DescribeCorner(Qt::Corner corner) -> std::tuple<GetPointPtr, MovePointPtr, int>;
		static QRect AlignRect(QRect rect, const QRect & parent, Qt::Corner corner);
		static QRect DefaultLayoutRect(const QRect & parent, Qt::Corner corner);

	protected:
		virtual QRect ParentGeometry() const;
		virtual QRect CalculateLayoutRect() const;
		virtual auto MakePopup(const Notification * notification) const -> AbstractNotificationPopupWidget *;
		virtual void SlideWidget(Item & item, const QRect & hgeom, const QRect & lgeom) const;

	protected:
		virtual bool eventFilter(QObject * watched, QEvent * event) override;

	protected:
		Q_INVOKABLE void ScheduleUpdate();
		Q_INVOKABLE void DoScheduledUpdate();

		virtual void Update();
		virtual void Relayout();
		virtual void NotificationClosed();
		virtual void ClearAnimatedWidgets();

	public:
		/// default popup creation, can be overridden via inheritance, it's called by default CreatePopupFunction.
		/// Note that function can be replaced to completely different one, which does not call those methods at all.
		virtual auto CreatePopup(const Notification & notification) const -> AbstractNotificationPopupWidget *;
		virtual void CustomizePopup(const Notification & notification, AbstractNotificationPopupWidget * popup) const;
		virtual void ConfigureExpiration(const Notification & notification, AbstractNotificationPopupWidget * popup) const;

	public:
		virtual void AddNotification(QPointer<const Notification> notification);
		virtual auto NotificationsCount() const -> unsigned;
		virtual auto NotificationAt(unsigned index) -> QPointer<const Notification>;
		virtual auto TakeNotification(unsigned index) -> QPointer<const Notification>;

		void SetParent(QWidget * widget);
		auto GetParent() const { return m_parent; }

		auto GetGeometry() const { return m_geometry; }
		void SetGeometry(const QRect & geom);

		auto GetCorner() const { return m_corner; }
		void SetCorner(Qt::Corner corner);

		auto GetWidgetsLimit() const { return m_widgetsLimit; }
		void SetWidgetsLimit(unsigned limit);

		void SetNotificationCenter(NotificationCenter * center);
		auto GetNotificationCenter() const { return m_ncenter; }

		auto GetColors() const -> std::tuple<QColor, QColor, QColor>;
		void SetColors(QColor error, QColor warning, QColor info);

		auto GetExpirationTimeouts() const -> std::tuple<std::chrono::milliseconds, std::chrono::milliseconds, std::chrono::milliseconds>;
		void SetExpirationTimeouts(std::chrono::milliseconds error, std::chrono::milliseconds warning, std::chrono::milliseconds info);

		/// popup creation can be overridden,
		/// returning different AbstractNotificationPopupWidget implementation/customization.
		void SetCreatePopupFunction(CreatePopupFunction func);
		auto GetCreatePopupFunction() const { return m_createPopup; }

		virtual void Init(NotificationCenter & center);

	Q_SIGNALS:
		void LinkActivated(QString href) const;
		void LinkHovered(QString href) const;

	public:
		NotificationLayout(QObject * parent = nullptr);
		NotificationLayout(NotificationCenter & center, QObject * parent = nullptr);
		virtual ~NotificationLayout();
	};
}
