#pragma once
#include <tuple>
#include <vector>
#include <chrono>     // for std::chrono::duration
#include <functional> // for std::function

#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtCore/QAbstractAnimation>
#include <QtCore/QPropertyAnimation>
#include <QtWidgets/QWidget>

#include <qtor/NotificationSystem.hqt>


namespace QtTools::NotificationSystem
{
	// forward declarations
	class AbstractNotificationPopupWidget;


	/// This class controls and lays out popup widgets in a stack,
	/// sort of like some applications show popups via system tray.
	/// Popups can be laid out on desktop or in some widget.
	class NotificationPopupLayout : public QObject
	{
		Q_OBJECT;

	protected:
		using GetPointPtr = QPoint(QRect::*)() const;
		using MovePointPtr = void (QRect::*)(const QPoint &);

		/// represents notification controlled by layout, holds some additional data
		struct Item
		{
			QPointer<const Notification> notification;
			QPointer<AbstractNotificationPopupWidget> popup;
			QPointer<QAbstractAnimation> moveOutAnimation;
			QPointer<QPropertyAnimation> slideAnimation;

		public:
			Item() = default;
			~Item();

			Item(Item &&) = default;
			Item & operator =(Item &&) = default;
		};

	public:
		using CreatePopupFunction = std::function<AbstractNotificationPopupWidget *(const Notification & n, const NotificationPopupLayout & that)>;

	protected:
		static constexpr unsigned ms_spacing = 2;
		static const CreatePopupFunction ms_defaultCreatePopup;

	protected:		
		CreatePopupFunction m_createPopup = ms_defaultCreatePopup;
		/// NotificationCenter we are belonging
		NotificationCenter * m_ncenter = nullptr;
		/// our parent widget, or desktop if null
		QPointer<QWidget> m_parent;
		/// our parent widget geometry where popups are liad out
		QRect m_geometry;
		/// rect corner where popups are liad out
		Qt::Corner m_corner = Qt::BottomRightCorner;
		/// popups simultaneous limit
		unsigned m_widgetsLimit = 5;

		// some format parameters
		QColor m_errorColor; // red    with 200 alpha
		QColor m_warnColor;  // yellow with 200 alpha
		QColor m_infoColor;  // silver with 200 alpha

		std::chrono::milliseconds m_errorTimeout = {}; // no timeout
		std::chrono::milliseconds m_warnTimeout = std::chrono::seconds(10);
		std::chrono::milliseconds m_infoTimeout = std::chrono::seconds(5);

		// popup items
		std::vector<Item> m_items;
		
		bool m_relayoutScheduled = false;
		bool m_relocation = false;

	protected:
		void InitColors();

	protected:
		/// translates corner into QRect corner points and y coordinate increment sign:
		///  Qt::TopLeftCorner     -> &QRect::topLeft,     &QRect::moveTopLeft,     +1
		///  ...
		///  Qt::BottomRightCorner -> &QRect::bottomRight, &QRect::moveBottomRight, -1
		///  
		/// Using those one can work with QRect without branching in respect of given corner
		static auto  DescribeCorner(Qt::Corner corner) -> std::tuple<GetPointPtr, MovePointPtr, int>;
		/// Aligns rect into parent by corner.
		static QRect AlignRect(QRect rect, const QRect & parent, Qt::Corner corner);
		/// calculates default layout rectangle(SetGeometry was not called, or called with invalid rect)
		static QRect DefaultLayoutRect(const QRect & parent, Qt::Corner corner);

	protected:
		/// returns parent geometry or desktop available geometry
		virtual QRect ParentRect() const;
		/// calculates rect where popups should be placed based on m_geometry and parent geometry
		virtual QRect CalculateLayoutRect() const;
		/// Makes popup via m_createPopup and does some additional internal configuration like,
		/// setting parent, installing event filter, etc
		virtual auto MakePopup(const Notification * notification) const -> AbstractNotificationPopupWidget *;
		/// starts or adjusts slide popup animation
		virtual void SlidePopup(Item & item, const QRect & hgeom, const QRect & lgeom) const;
		/// starts(if not already) or schedules(it animation can not be started immediately)
		/// move out animation(animation itself provided by popup)
		virtual void MoveOutPopup(Item & item);

	protected:
		/// handles mouse right click - move out popup
		virtual bool eventFilter(QObject * watched, QEvent * event) override;

	protected:
		Q_INVOKABLE void ScheduleUpdate();
		Q_INVOKABLE void DoScheduledUpdate();

		/// handles notification popup closure
		Q_SLOT virtual void NotificationPopupClosed();
		Q_SLOT virtual void ParentResized();

		virtual void Update(bool relocation);
		virtual void Relayout(bool relocation);		

	public:
		/// default popup creation, can be overridden via inheritance, it's called by default CreatePopupFunction.
		/// Note that function can be replaced to completely different one, which does not call those methods at all.		
		virtual auto CreatePopup(const Notification & notification) const -> AbstractNotificationPopupWidget *;
		/// Called by CreatePopup method, customizes popup by GetColors()
		virtual void CustomizePopup(const Notification & notification, AbstractNotificationPopupWidget * popup) const;
		/// Called by CreatePopup method, configurates expiration timeouts on popup
		virtual void ConfigureExpiration(const Notification & notification, AbstractNotificationPopupWidget * popup) const;

	public:
		void SetParent(QWidget * widget);
		auto GetParent() const { return m_parent; }

		auto GetGeometry() const { return m_geometry; }
		void SetGeometry(const QRect & geom);

		auto GetCorner() const { return m_corner; }
		void SetCorner(Qt::Corner corner);

		auto GetWidgetsLimit() const { return m_widgetsLimit; }
		void SetWidgetsLimit(unsigned limit);

		void SetNotificationCenter(NotificationCenter * center);
		auto GetNotificationCenter() const { return m_ncenter; }

		auto GetColors() const -> std::tuple<QColor, QColor, QColor>;
		void SetColors(QColor error, QColor warning, QColor info);

		auto GetExpirationTimeouts() const -> std::tuple<std::chrono::milliseconds, std::chrono::milliseconds, std::chrono::milliseconds>;
		void SetExpirationTimeouts(std::chrono::milliseconds error, std::chrono::milliseconds warning, std::chrono::milliseconds info);

		/// popup creation can be overridden,
		/// returning different AbstractNotificationPopupWidget implementation/customization.
		void SetCreatePopupFunction(CreatePopupFunction func);
		auto GetCreatePopupFunction() const { return m_createPopup; }

	public:
		virtual void Init(NotificationCenter & center);

	public:
		virtual void AddPopup(AbstractNotificationPopupWidget * popup);
		virtual void AddNotification(QPointer<const Notification> notification);
		virtual auto NotificationsCount() const -> unsigned;

	Q_SIGNALS:
		void LinkActivated(QString href) const;
		void LinkHovered(QString href) const;

	public:
		NotificationPopupLayout(QObject * parent = nullptr);
		NotificationPopupLayout(NotificationCenter & center, QObject * parent = nullptr);
		virtual ~NotificationPopupLayout();
	};
}
