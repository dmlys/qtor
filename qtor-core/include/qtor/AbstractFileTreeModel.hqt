#pragma once
#include <QtCore/QSize>
#include <QtCore/QString>
#include <QtCore/QAbstractItemModel>

#include <qtor/torrent.hpp>
#include <qtor/model_meta.hpp>
#include <qtor/formatter.hpp>

namespace qtor
{
	class AbstractFileTreeModel : public QAbstractItemModel
	{
		Q_OBJECT;

	private:
		using self_type = AbstractFileTreeModel;
		using base_type = QAbstractItemModel;

	protected:
		std::vector<unsigned> m_columns;
		std::shared_ptr<formatter> m_fmt = std::make_shared<formatter>();
		std::shared_ptr<torrent_file_meta> m_meta = std::make_shared<torrent_file_meta>();

		QString m_filterStr;
		Qt::SortOrder m_sortOrder = Qt::AscendingOrder;
		int m_sortColumn = -1;

	protected:
		void SetColumns(std::vector<unsigned> columns);

	protected:
		virtual void FilterBy(QString expr) = 0;
		virtual void SortBy(int column, Qt::SortOrder order) = 0;

	public:
		const auto & GetMeta() const noexcept { return m_meta; }
		const auto & GetFormatter() const noexcept { return m_fmt; }

		virtual auto GetEntity(const QModelIndex & idx) const -> torrent_file_entity = 0;
		virtual auto GetItem(const QModelIndex & idx) const -> QVariant;

		virtual int FindColumn(unsigned id) const;
		virtual QString FieldName(int section) const;

		virtual QString GetString(const QModelIndex & idx) const;
		virtual QString GetStringShort(const QModelIndex & idx) const;

		void SetFilter(QString expr);
		auto GetFilter() const noexcept { return m_filterStr; }

		void SetSorting(int column, Qt::SortOrder order = Qt::AscendingOrder) { sort(column, order); }
		auto GetSorting() const noexcept { return std::make_pair(m_sortColumn, m_sortOrder); }

	public:
		int rowCount(const QModelIndex & parent = QModelIndex()) const override = 0;
		int columnCount(const QModelIndex & parent = QModelIndex()) const override;
		void sort(int column, Qt::SortOrder order = Qt::AscendingOrder) final override;

		// some default implementations with help of GetValueShort / GetFieldName / others
		QVariant data(const QModelIndex & index, int role = Qt::DisplayRole) const override;
		QVariant headerData(int section, Qt::Orientation orientation, int role = Qt::DisplayRole) const override;

	Q_SIGNALS:
		void SortingChanged(int column, Qt::SortOrder order);
		void FilterChanged(QString expr);

	public:
		using base_type::base_type;
	};
}
