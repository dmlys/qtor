#pragma once
#include <memory> // for shared_ptr
#include <any>

#include <viewed/sfview_qtbase.hpp>
#include <viewed/ptr_sequence_container.hpp>

#include <QtCore/QObject>
#include <QtCore/QPointer>
#include <QtCore/QString>
#include <QtCore/QDateTime>
#include <QtCore/QAbstractItemModel>

#include <qtor/NotificationSystem.hqt>
#include <qtor/NotificationSystemExt.hqt>
#include <qtor/NotificationView.hqt>

namespace QtTools::NotificationSystem
{
	class TimestampPred
	{
	public:
		bool operator()(const Notification * n1, const Notification * n2) const
		{
			return operator()(*n1, *n2);
		}

		bool operator()(const Notification & n1, const Notification & n2) const
		{
			return n1.Timestamp() < n2.Timestamp();
		}
	};

	class NotificationFilter
	{
	private:
		QString m_filter;
		NotificationLevelBitset m_levels = 0b111;
		NotificationPriorityBitset m_priorities = 0b111;

	public:
		// same, incremental
		viewed::refilter_type set_expr(QString search);
		viewed::refilter_type set_expr(NotificationLevelBitset levels);
		viewed::refilter_type set_expr(NotificationPriorityBitset priorities);

		bool matches(const Notification & n) const;
		bool always_matches() const noexcept;

		bool operator()(const Notification & n) const { return matches(n); }
		bool operator()(const Notification * n) const { return matches(*n); }
		explicit operator bool() const noexcept { return not always_matches(); }
	};


	/// Default AbstractNotificationModel implementation using viewed::sfview_qtbase,
	/// with filtering support
	class NotificationModel :
		public AbstractNotificationModel,
		public viewed::sfview_qtbase<NotificationStore, viewed::null_sorter, NotificationFilter>
	{
		using self_type = NotificationModel;
		using view_type = viewed::sfview_qtbase<NotificationStore, viewed::null_sorter, NotificationFilter>;
		using base_type = AbstractNotificationModel;

	protected:
		using view_type::m_owner;
		using view_type::m_store; // vector of pointers
		using view_type::m_sort_pred;
		using view_type::m_filter_pred;

	protected:
		std::shared_ptr<NotificationStore> m_owner_store;

	protected:
		virtual void FilterBy(QString expr) override;
		virtual void FilterBy(NotificationLevelBitset levels) override;
		virtual void FilterBy(NotificationPriorityBitset priorities) override;

	public:
		virtual QPointer<NotificationCenter> GetNotificationCenter() const override;
		virtual const Notification & GetItem(int row) const override;

		virtual int FullRowCount() const override;
		int rowCount(const QModelIndex & parent = QModelIndex()) const override;

	public:
		NotificationModel(std::shared_ptr<NotificationStore> store, QObject * parent = nullptr);
		~NotificationModel() = default;

		Q_DISABLE_COPY(NotificationModel);
	};
}
