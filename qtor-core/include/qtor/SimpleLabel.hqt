#pragma once
#include <memory>
#include <utility>

#include <QtCore/QString>
#include <QtGui/QPixmap>
#include <QtGui/QTextOption>
#include <QtGui/QTextLayout>
#include <QtWidgets/QWidget>
#include <QtWidgets/QFrame>

namespace QtTools
{
	class SimpleLabel : public QFrame
	{
		Q_OBJECT;

		Q_PROPERTY(QString text READ text WRITE setText)
		Q_PROPERTY(QPixmap pixmap READ pixmap WRITE setPixmap)
		Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
		Q_PROPERTY(bool wordWrap READ wordWrap WRITE setWordWrap)
		Q_PROPERTY(int margin READ margin WRITE setMargin)
		Q_PROPERTY(int indent READ indent WRITE setIndent)

	protected:
		QString m_text;
		QPixmap m_pixmap;
		Qt::Alignment m_alignment = Qt::AlignLeft;
		bool m_wordWrap = false;
		int m_margin = 0;
		int m_indent = 0;

		int m_maximum_lines = 0;

	protected:
		virtual Qt::LayoutDirection TextDirection() const;
		virtual QTextOption PrepareTextOption() const;
		virtual auto LayoutText(const QRect & rect) const -> std::unique_ptr<QTextLayout>;
		virtual QRect BoundingRect(const QRect & rect) const;
		virtual void PreparePainter(QPainter * painter) const;
		virtual void updateLabel();


	public:
		//virtual void resizeEvent(QResizeEvent * event) override;
		virtual void paintEvent(QPaintEvent * event) override;
		//virtual void changeEvent(QEvent *) override;
		//virtual void contextMenuEvent(QContextMenuEvent *ev) override;

	public:
		virtual QSize sizeForWidth(int width) const;
		//int heightForWidth(int width) const override;
		//QSize sizeHint() const override;
		//QSize minimumSizeHint() const override;

	public:
		QString text() const { return m_text; }
		Q_SLOT void setText(QString text);
		Q_SLOT void setNum(int num);
	    Q_SLOT void setNum(double num);

		QPixmap pixmap() const { return m_pixmap; }
		Q_SLOT void setPixmap(QPixmap pixmap);

		Q_SLOT void clear();

		QWidget * buddy() const;
		void setBuddy(QWidget * buddy);

		Qt::Alignment alignment() const { return m_alignment; }
		void setAlignment(Qt::Alignment alignment);

		bool wordWrap() const { return m_wordWrap; }
		void setWordWrap(bool wrap);

		int margin() const { return m_margin; }
		void setMargin(int margin);

		int indent() const { return m_indent; }
		void setIndent(int ident);

	public:
		Q_DISABLE_COPY(SimpleLabel);
		~SimpleLabel() = default;

		explicit SimpleLabel(QWidget * parent = nullptr, Qt::WindowFlags flags = Qt::WindowFlags());
		explicit SimpleLabel(const QString & text, QWidget * parent = nullptr, Qt::WindowFlags flags = Qt::WindowFlags());
	};
}
