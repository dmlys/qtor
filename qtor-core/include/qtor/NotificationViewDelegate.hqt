
#pragma once
#include <memory> // for shared_ptr
#include <any>

#include <QtGui/QTextDocument>
#include <QtGui/QSyntaxHighlighter>
#include <QtWidgets/QAbstractItemDelegate>

#include <qtor/NotificationSystem.hqt>
#include <qtor/NotificationView.hqt>


namespace QtTools::NotificationSystem
{
	class NotificationViewDelegate : public QAbstractItemDelegate
	{
	protected:
		/// search highlighter
		class SearchHighlighter;

		/// cached calculated various parts of drawn content.
		struct LaidoutItem
		{
			// First time delegate is called with sizeHint, 
			// option->rect contains basic rectangle where item can placed, 
			// it can be whole listView viewport area.
			// 
			// Second time delegate is called with paint,
			// and option->rect holds proper region calculated based on previous sizeHint calculation.
			// 
			// hintTopLeft holds option->rect topLeft point
			// so on second call we can just adjust calculated previously parts rectangles
	
			// address of item for which this item was computed
	
			QModelIndex index;   // index for which this item was computed
			QPoint hintTopLeft;  // see above description
	
			// data from notification
			QPixmap pixmap;      // notification pixmap
			QString timestamp;   // notification datetime
			QString title;       // notification title
			QString text;        // notification text
	
			Qt::TextFormat textFormat;      // TextFormat of text
			NotificationLevel level;        // notification level 
			NotificationPriority priority;  // notification priority
	
			// searchStr, optional, comes from some search field,
			// not from notification itself
			QString searchStr;
	
			// option from sizeHint/paint call(update on each call), 
			// lifetime the same, this is just for a convenience.
			const QStyleOptionViewItem * option = nullptr;
	
			QFont baseFont;      // basic font, baseFont = option->font;
			QFont titleFont;     // title text font: 1.1 * baseFont, bold.
			QFont timestampFont; // timestamp font: baseFont
			QFont textFont;      // baseFont
	
			QRect titleRect;     // rectangle occupied by title text, without all margins
			QRect timestampRect; // rectangle occupied by datetime text, without all margins
			QRect textRect;      // rectangle occupied by text, without all margins
			QRect pixmapRect;    // rectangle occupied by icon, without all margins
			QRect totalRect;     // rectangle occupied by union of all rectangles, including all margins
	
			// cached prepared and calculated QTextDocument for text
			// shared_ptr only for convenience(pimpl + copyable), logically - unique
			std::shared_ptr<QTextDocument> textdocptr;
		};

	protected:
		mutable LaidoutItem m_cachedItem;

		QIcon m_errorIcon;
		QIcon m_warnIcon;
		QIcon m_infoIcon;

	protected:
		static const QMargins ms_ContentMargins; // { 0, 1, 0, 1 };
		static const unsigned ms_Spacing;  // 1
		static const QTextCharFormat ms_searchFormat;

	protected:
		static QMargins TextMargins(const QStyleOptionViewItem & option);
		
		virtual QPixmap GetPixmap(const Notification & notification, const QStyleOptionViewItem & option) const;
		virtual void PrepareTextDocument(QTextDocument & textDoc, const LaidoutItem & item) const;
		virtual void LayoutItem(const QStyleOptionViewItem & option, LaidoutItem & item) const;
		virtual void Draw(QPainter * painter, const LaidoutItem & item) const;
		virtual void DrawBackground(QPainter * painter, const LaidoutItem & item) const;

	protected:
		virtual void LinkActivated(QString href, const QStyleOptionViewItem & option) const;
		virtual void LinkHovered(QString href, const QStyleOptionViewItem & option) const;

	protected:
		void init(const QStyleOptionViewItem & option, const QModelIndex & index) const;

	public:
		virtual void paint(QPainter * painter, const QStyleOptionViewItem & option, const QModelIndex & index) const override;
		virtual QSize sizeHint(const QStyleOptionViewItem & option, const QModelIndex & index) const override;
		virtual bool editorEvent(QEvent * event, QAbstractItemModel * model, const QStyleOptionViewItem & option, const QModelIndex & index) override;
		virtual bool helpEvent(QHelpEvent * event, QAbstractItemView * view, const QStyleOptionViewItem & option, const QModelIndex & index) override;

	public:
		NotificationViewDelegate(QObject * parent = nullptr);
	};


	/// search highlighter
	class NotificationViewDelegate::SearchHighlighter : public QSyntaxHighlighter
	{
	protected:
		QString m_searchString;
		QTextCharFormat m_searchFormat;

	protected:
		virtual void highlightBlock(const QString &text) override;

	public:
		void SetSearchText(QString text) { m_searchString = std::move(text); }
		auto GetSearchText() const       { return m_searchString; }

		void SetFormat(const QTextCharFormat & format) { m_searchFormat = format; }
		auto Getformat() const                         { return m_searchFormat; }

	public:
		using QSyntaxHighlighter::QSyntaxHighlighter;
	};
}
