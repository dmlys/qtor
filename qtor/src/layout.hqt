#pragma once
#include <qtor/NotificationSystem.hqt>
#include <qtor/NotificationSystemExt.hqt>


namespace QtTools::NotificationSystem
{
	class AbstractNotificationLayout : public QObject
	{
		Q_OBJECT

		Q_PROPERTY(QWidget *  parent   READ GetParent   WRITE SetParent)
		Q_PROPERTY(QRect      geometry READ GetGeometry WRITE SetGeometry)
		Q_PROPERTY(Qt::Corner corner   READ GetCorner   WRITE SetCorner)

	public:
		virtual void AddNotification(QPointer<const Notification> widget) = 0;
		virtual auto NotificationAt(unsigned index) -> QPointer<const Notification> = 0;
		virtual auto TakeNotification(unsigned index) -> QPointer<const Notification> = 0;
		virtual auto NotificationsCount() const -> unsigned = 0;

		virtual void SetParent(QWidget * widget) = 0;
		virtual QWidget * GetParent() const = 0;

		virtual  void SetGeometry(const QRect & geom) = 0;
		virtual QRect GetGeometry() const = 0;

		virtual       void SetCorner(Qt::Corner corner) = 0;
		virtual Qt::Corner GetCorner() const = 0;
	};

	class NotificationLayout : public AbstractNotificationLayout
	{
		Q_OBJECT

	protected:
		using GetPointPtr = QPoint(QRect::*)() const;
		using MovePointPtr = void (QRect::*)(const QPoint &);

		struct Item
		{
			QPointer<const Notification> notification;
			QPointer<NotificationPopupWidget> widget;
			QPointer<QAbstractAnimation> animation;
		};

	protected:
		std::vector<Item> m_items;
		QPointer<QWidget> m_parent;
		QRect m_geometry;
		Qt::Corner m_corner = Qt::BottomRightCorner;
		NotificationCenter * m_owner = nullptr;
		unsigned m_spacing = 2;
		bool m_relayoutScheduled = false;

	protected:
		static auto  DescribeCorner(Qt::Corner corner) -> std::tuple<GetPointPtr, MovePointPtr, int>;
		static QRect AlignRect(QRect rect, const QRect & parent, Qt::Corner corner);
		static QRect DefaultLayoutRect(const QRect & parent, Qt::Corner corner);

	protected:
		
		virtual QRect ParentGeometry() const;
		virtual QRect CalculateLayoutRect() const;

	//protected:
	//	virtual bool eventFilter(QObject * watched, QEvent * event) override;

	protected:
		Q_SLOT virtual void Relayout();
		Q_SLOT void ScheduleRelayout();

	public:
		virtual void AddNotification(QPointer<const Notification> notification, NotificationPopupWidget * widget);
		virtual void AddNotification(QPointer<const Notification> notification) override;
		virtual auto NotificationAt(unsigned index) -> QPointer<const Notification> override;
		virtual auto TakeNotification(unsigned index) -> QPointer<const Notification> override;
		virtual auto NotificationsCount() const -> unsigned override;

		virtual void SetParent(QWidget * widget) override;
		virtual QWidget * GetParent() const override;

		virtual  void SetGeometry(const QRect & geom) override;
		virtual QRect GetGeometry() const override;

		virtual       void SetCorner(Qt::Corner corner) override;
		virtual Qt::Corner GetCorner() const override;

	public:
		NotificationLayout(NotificationCenter & owner)
			: m_owner(&owner) {}
	};

} // namespace QtTools::NotificationSystem
